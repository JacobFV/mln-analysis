// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Initialize the database by:
// 1. In `tsconfig.json` (or wherever you store your compiler options),
// change the `"isolatedModules": true` to `"isolatedModules": false`
// 2. Run `npx prisma migrate dev --name init`

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model Email {
  id                     String    @id @default(cuid())
  email                  String    @unique
  needsVerification      Boolean   @default(true) /// email should not be used until verified
  verificationCode       String?
  verificationCodeSentOn DateTime?
  user                   Entity    @relation(fields: [userId], references: [id])
  userId                 String
  primary                Boolean   @default(false)
}

/// Stores all login attempts (credential based and oath)
/// Of course, OAuth login attempts will always succeed
model LoginAttempt {
  id        Int      @id @default(autoincrement())
  ip        String
  userAgent String
  headers   String
  timestamp DateTime
  email     String
  success   Boolean
  user      Entity   @relation(fields: [userId], references: [id])
  userId    String
}

model GroupMembership {
  id       String   @id @default(cuid())
  group    Entity   @relation("GroupMembershipGroup", fields: [groupId], references: [id])
  groupId  String
  member   Entity   @relation("GroupMembershipMember", fields: [memberId], references: [id])
  memberId String
  joinedAt DateTime @default(now())
}

/// This model represents a union type between users and groups
/// You will need to perform a runtime cast in typescript to use it
model Entity {
  id   String @id @default(cuid()) /// this id is used a a global point of reference for users and groups
  type String @default("user") /// either "user" or "group"; may add more types later

  // common attributes
  name                    String               @unique
  picture                 String
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  deleted                 Boolean              @default(false)
  deletedAt               DateTime?
  memberOfGroups          GroupMembership[]    @relation("GroupMembershipMember")
  permissionsAssignedToMe ExplicitPermission[] @relation("PermissionsAssignedToMe")

  // In the future, extract user/group-specific fields onto separate tables
  // user   User?
  // group  Group?

  /// user-specific attributes
  emails                     Email[]
  loginAttempts              LoginAttempt[]
  pswHash                    String?
  ownerOfGroups              Entity[]             @relation("GroupOwners")
  explicitPermissionsCreated ExplicitPermission[] @relation("ExplicitPermissionsCreated") // permissions that the user has added to other files (including ones that the user does not own)

  /// group-specific fields
  owner                    Entity?           @relation("GroupOwners", fields: [ownerId], references: [id])
  ownerId                  String?
  groupMembershipRelations GroupMembership[] @relation("GroupMembershipGroup")
}

model ExplicitPermission {
  id                String   @id @default(cuid())
  path              String
  appliesTo         Entity   @relation("PermissionsAssignedToMe", fields: [appliesToEntityId], references: [id]) /// the entity that the permissions are applied to
  appliesToEntityId String
  permissionLevel   String /// 'HIDDEN', 'READ', 'WRITE', 'ADMIN', 'OWNER'
  createdOn         DateTime @default(now())
  createdBy         Entity   @relation("ExplicitPermissionsCreated", fields: [createdById], references: [id])
  createdById       String
}
