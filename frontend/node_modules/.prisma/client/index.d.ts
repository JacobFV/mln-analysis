
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model Email
 * 
 */
export type Email = {
  id: string
  email: string
  needsVerification: boolean
  verificationCode: string | null
  verificationCodeSentOn: Date | null
  userId: string
  primary: boolean
}

/**
 * Model LoginAttempt
 * Stores all login attempts (credential based and oath)
 * Of course, OAuth login attempts will always succeed
 */
export type LoginAttempt = {
  id: number
  ip: string
  userAgent: string
  headers: string
  timestamp: Date
  email: string
  success: boolean
  userId: string
}

/**
 * Model GroupMembership
 * 
 */
export type GroupMembership = {
  id: string
  groupId: string
  memberId: string
  joinedAt: Date
}

/**
 * Model Entity
 * This model represents a union type between users and groups
 * You will need to perform a runtime cast in typescript to use it
 */
export type Entity = {
  /**
   * this id is used a a global point of reference for users and groups
   */
  id: string
  /**
   * either "user" or "group"; may add more types later
   */
  type: string
  name: string
  picture: string
  createdAt: Date
  updatedAt: Date
  deleted: boolean
  deletedAt: Date | null
  pswHash: string | null
  ownerId: string | null
}

/**
 * Model ExplicitPermission
 * 
 */
export type ExplicitPermission = {
  id: string
  path: string
  appliesToEntityId: string
  /**
   * 'HIDDEN', 'READ', 'WRITE', 'ADMIN', 'OWNER'
   */
  permissionLevel: string
  createdOn: Date
  createdById: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Emails
 * const emails = await prisma.email.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Emails
   * const emails = await prisma.email.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.email`: Exposes CRUD operations for the **Email** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Emails
    * const emails = await prisma.email.findMany()
    * ```
    */
  get email(): Prisma.EmailDelegate<GlobalReject>;

  /**
   * `prisma.loginAttempt`: Exposes CRUD operations for the **LoginAttempt** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more LoginAttempts
    * const loginAttempts = await prisma.loginAttempt.findMany()
    * ```
    */
  get loginAttempt(): Prisma.LoginAttemptDelegate<GlobalReject>;

  /**
   * `prisma.groupMembership`: Exposes CRUD operations for the **GroupMembership** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GroupMemberships
    * const groupMemberships = await prisma.groupMembership.findMany()
    * ```
    */
  get groupMembership(): Prisma.GroupMembershipDelegate<GlobalReject>;

  /**
   * `prisma.entity`: Exposes CRUD operations for the **Entity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entities
    * const entities = await prisma.entity.findMany()
    * ```
    */
  get entity(): Prisma.EntityDelegate<GlobalReject>;

  /**
   * `prisma.explicitPermission`: Exposes CRUD operations for the **ExplicitPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExplicitPermissions
    * const explicitPermissions = await prisma.explicitPermission.findMany()
    * ```
    */
  get explicitPermission(): Prisma.ExplicitPermissionDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  /**
   * Prisma Client JS version: 3.11.1
   * Query Engine version: 1a2506facaf1a4727b7c26850735e88ec779dee9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    Email: 'Email',
    LoginAttempt: 'LoginAttempt',
    GroupMembership: 'GroupMembership',
    Entity: 'Entity',
    ExplicitPermission: 'ExplicitPermission'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined; 
  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type EntityCountOutputType
   */


  export type EntityCountOutputType = {
    memberOfGroups: number
    permissionsAssignedToMe: number
    emails: number
    loginAttempts: number
    ownerOfGroups: number
    explicitPermissionsCreated: number
    groupMembershipRelations: number
  }

  export type EntityCountOutputTypeSelect = {
    memberOfGroups?: boolean
    permissionsAssignedToMe?: boolean
    emails?: boolean
    loginAttempts?: boolean
    ownerOfGroups?: boolean
    explicitPermissionsCreated?: boolean
    groupMembershipRelations?: boolean
  }

  export type EntityCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EntityCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EntityCountOutputType
    : S extends undefined
    ? never
    : S extends EntityCountOutputTypeArgs
    ?'include' extends U
    ? EntityCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EntityCountOutputType ? EntityCountOutputType[P] : never
  } 
    : EntityCountOutputType
  : EntityCountOutputType




  // Custom InputTypes

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EntityCountOutputType
     * 
    **/
    select?: EntityCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model Email
   */


  export type AggregateEmail = {
    _count: EmailCountAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  export type EmailMinAggregateOutputType = {
    id: string | null
    email: string | null
    needsVerification: boolean | null
    verificationCode: string | null
    verificationCodeSentOn: Date | null
    userId: string | null
    primary: boolean | null
  }

  export type EmailMaxAggregateOutputType = {
    id: string | null
    email: string | null
    needsVerification: boolean | null
    verificationCode: string | null
    verificationCodeSentOn: Date | null
    userId: string | null
    primary: boolean | null
  }

  export type EmailCountAggregateOutputType = {
    id: number
    email: number
    needsVerification: number
    verificationCode: number
    verificationCodeSentOn: number
    userId: number
    primary: number
    _all: number
  }


  export type EmailMinAggregateInputType = {
    id?: true
    email?: true
    needsVerification?: true
    verificationCode?: true
    verificationCodeSentOn?: true
    userId?: true
    primary?: true
  }

  export type EmailMaxAggregateInputType = {
    id?: true
    email?: true
    needsVerification?: true
    verificationCode?: true
    verificationCodeSentOn?: true
    userId?: true
    primary?: true
  }

  export type EmailCountAggregateInputType = {
    id?: true
    email?: true
    needsVerification?: true
    verificationCode?: true
    verificationCodeSentOn?: true
    userId?: true
    primary?: true
    _all?: true
  }

  export type EmailAggregateArgs = {
    /**
     * Filter which Email to aggregate.
     * 
    **/
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Emails
    **/
    _count?: true | EmailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EmailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EmailMaxAggregateInputType
  }

  export type GetEmailAggregateType<T extends EmailAggregateArgs> = {
        [P in keyof T & keyof AggregateEmail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEmail[P]>
      : GetScalarType<T[P], AggregateEmail[P]>
  }




  export type EmailGroupByArgs = {
    where?: EmailWhereInput
    orderBy?: Enumerable<EmailOrderByWithAggregationInput>
    by: Array<EmailScalarFieldEnum>
    having?: EmailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EmailCountAggregateInputType | true
    _min?: EmailMinAggregateInputType
    _max?: EmailMaxAggregateInputType
  }


  export type EmailGroupByOutputType = {
    id: string
    email: string
    needsVerification: boolean
    verificationCode: string | null
    verificationCodeSentOn: Date | null
    userId: string
    primary: boolean
    _count: EmailCountAggregateOutputType | null
    _min: EmailMinAggregateOutputType | null
    _max: EmailMaxAggregateOutputType | null
  }

  type GetEmailGroupByPayload<T extends EmailGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EmailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EmailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EmailGroupByOutputType[P]>
            : GetScalarType<T[P], EmailGroupByOutputType[P]>
        }
      >
    >


  export type EmailSelect = {
    id?: boolean
    email?: boolean
    needsVerification?: boolean
    verificationCode?: boolean
    verificationCodeSentOn?: boolean
    user?: boolean | EntityArgs
    userId?: boolean
    primary?: boolean
  }

  export type EmailInclude = {
    user?: boolean | EntityArgs
  }

  export type EmailGetPayload<
    S extends boolean | null | undefined | EmailArgs,
    U = keyof S
      > = S extends true
        ? Email
    : S extends undefined
    ? never
    : S extends EmailArgs | EmailFindManyArgs
    ?'include' extends U
    ? Email  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? EntityGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? EntityGetPayload<S['select'][P]> :  P extends keyof Email ? Email[P] : never
  } 
    : Email
  : Email


  type EmailCountArgs = Merge<
    Omit<EmailFindManyArgs, 'select' | 'include'> & {
      select?: EmailCountAggregateInputType | true
    }
  >

  export interface EmailDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Email that matches the filter.
     * @param {EmailFindUniqueArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EmailFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EmailFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Email'> extends True ? CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>> : CheckSelect<T, Prisma__EmailClient<Email | null >, Prisma__EmailClient<EmailGetPayload<T> | null >>

    /**
     * Find the first Email that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindFirstArgs} args - Arguments to find a Email
     * @example
     * // Get one Email
     * const email = await prisma.email.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EmailFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EmailFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Email'> extends True ? CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>> : CheckSelect<T, Prisma__EmailClient<Email | null >, Prisma__EmailClient<EmailGetPayload<T> | null >>

    /**
     * Find zero or more Emails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Emails
     * const emails = await prisma.email.findMany()
     * 
     * // Get first 10 Emails
     * const emails = await prisma.email.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const emailWithIdOnly = await prisma.email.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EmailFindManyArgs>(
      args?: SelectSubset<T, EmailFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Email>>, PrismaPromise<Array<EmailGetPayload<T>>>>

    /**
     * Create a Email.
     * @param {EmailCreateArgs} args - Arguments to create a Email.
     * @example
     * // Create one Email
     * const Email = await prisma.email.create({
     *   data: {
     *     // ... data to create a Email
     *   }
     * })
     * 
    **/
    create<T extends EmailCreateArgs>(
      args: SelectSubset<T, EmailCreateArgs>
    ): CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>>

    /**
     * Delete a Email.
     * @param {EmailDeleteArgs} args - Arguments to delete one Email.
     * @example
     * // Delete one Email
     * const Email = await prisma.email.delete({
     *   where: {
     *     // ... filter to delete one Email
     *   }
     * })
     * 
    **/
    delete<T extends EmailDeleteArgs>(
      args: SelectSubset<T, EmailDeleteArgs>
    ): CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>>

    /**
     * Update one Email.
     * @param {EmailUpdateArgs} args - Arguments to update one Email.
     * @example
     * // Update one Email
     * const email = await prisma.email.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EmailUpdateArgs>(
      args: SelectSubset<T, EmailUpdateArgs>
    ): CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>>

    /**
     * Delete zero or more Emails.
     * @param {EmailDeleteManyArgs} args - Arguments to filter Emails to delete.
     * @example
     * // Delete a few Emails
     * const { count } = await prisma.email.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EmailDeleteManyArgs>(
      args?: SelectSubset<T, EmailDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Emails
     * const email = await prisma.email.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EmailUpdateManyArgs>(
      args: SelectSubset<T, EmailUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Email.
     * @param {EmailUpsertArgs} args - Arguments to update or create a Email.
     * @example
     * // Update or create a Email
     * const email = await prisma.email.upsert({
     *   create: {
     *     // ... data to create a Email
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Email we want to update
     *   }
     * })
    **/
    upsert<T extends EmailUpsertArgs>(
      args: SelectSubset<T, EmailUpsertArgs>
    ): CheckSelect<T, Prisma__EmailClient<Email>, Prisma__EmailClient<EmailGetPayload<T>>>

    /**
     * Count the number of Emails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailCountArgs} args - Arguments to filter Emails to count.
     * @example
     * // Count the number of Emails
     * const count = await prisma.email.count({
     *   where: {
     *     // ... the filter for the Emails we want to count
     *   }
     * })
    **/
    count<T extends EmailCountArgs>(
      args?: Subset<T, EmailCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EmailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EmailAggregateArgs>(args: Subset<T, EmailAggregateArgs>): PrismaPromise<GetEmailAggregateType<T>>

    /**
     * Group by Email.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EmailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EmailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EmailGroupByArgs['orderBy'] }
        : { orderBy?: EmailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EmailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEmailGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Email.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EmailClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Email findUnique
   */
  export type EmailFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * Throw an Error if a Email can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Email to fetch.
     * 
    **/
    where: EmailWhereUniqueInput
  }


  /**
   * Email findFirst
   */
  export type EmailFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * Throw an Error if a Email can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Email to fetch.
     * 
    **/
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Emails.
     * 
    **/
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Emails.
     * 
    **/
    distinct?: Enumerable<EmailScalarFieldEnum>
  }


  /**
   * Email findMany
   */
  export type EmailFindManyArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * Filter, which Emails to fetch.
     * 
    **/
    where?: EmailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Emails to fetch.
     * 
    **/
    orderBy?: Enumerable<EmailOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Emails.
     * 
    **/
    cursor?: EmailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Emails from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Emails.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EmailScalarFieldEnum>
  }


  /**
   * Email create
   */
  export type EmailCreateArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * The data needed to create a Email.
     * 
    **/
    data: XOR<EmailCreateInput, EmailUncheckedCreateInput>
  }


  /**
   * Email update
   */
  export type EmailUpdateArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * The data needed to update a Email.
     * 
    **/
    data: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
    /**
     * Choose, which Email to update.
     * 
    **/
    where: EmailWhereUniqueInput
  }


  /**
   * Email updateMany
   */
  export type EmailUpdateManyArgs = {
    /**
     * The data used to update Emails.
     * 
    **/
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyInput>
    /**
     * Filter which Emails to update
     * 
    **/
    where?: EmailWhereInput
  }


  /**
   * Email upsert
   */
  export type EmailUpsertArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * The filter to search for the Email to update in case it exists.
     * 
    **/
    where: EmailWhereUniqueInput
    /**
     * In case the Email found by the `where` argument doesn't exist, create a new Email with this data.
     * 
    **/
    create: XOR<EmailCreateInput, EmailUncheckedCreateInput>
    /**
     * In case the Email was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EmailUpdateInput, EmailUncheckedUpdateInput>
  }


  /**
   * Email delete
   */
  export type EmailDeleteArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
    /**
     * Filter which Email to delete.
     * 
    **/
    where: EmailWhereUniqueInput
  }


  /**
   * Email deleteMany
   */
  export type EmailDeleteManyArgs = {
    /**
     * Filter which Emails to delete
     * 
    **/
    where?: EmailWhereInput
  }


  /**
   * Email without action
   */
  export type EmailArgs = {
    /**
     * Select specific fields to fetch from the Email
     * 
    **/
    select?: EmailSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EmailInclude | null
  }



  /**
   * Model LoginAttempt
   */


  export type AggregateLoginAttempt = {
    _count: LoginAttemptCountAggregateOutputType | null
    _avg: LoginAttemptAvgAggregateOutputType | null
    _sum: LoginAttemptSumAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  export type LoginAttemptAvgAggregateOutputType = {
    id: number | null
  }

  export type LoginAttemptSumAggregateOutputType = {
    id: number | null
  }

  export type LoginAttemptMinAggregateOutputType = {
    id: number | null
    ip: string | null
    userAgent: string | null
    headers: string | null
    timestamp: Date | null
    email: string | null
    success: boolean | null
    userId: string | null
  }

  export type LoginAttemptMaxAggregateOutputType = {
    id: number | null
    ip: string | null
    userAgent: string | null
    headers: string | null
    timestamp: Date | null
    email: string | null
    success: boolean | null
    userId: string | null
  }

  export type LoginAttemptCountAggregateOutputType = {
    id: number
    ip: number
    userAgent: number
    headers: number
    timestamp: number
    email: number
    success: number
    userId: number
    _all: number
  }


  export type LoginAttemptAvgAggregateInputType = {
    id?: true
  }

  export type LoginAttemptSumAggregateInputType = {
    id?: true
  }

  export type LoginAttemptMinAggregateInputType = {
    id?: true
    ip?: true
    userAgent?: true
    headers?: true
    timestamp?: true
    email?: true
    success?: true
    userId?: true
  }

  export type LoginAttemptMaxAggregateInputType = {
    id?: true
    ip?: true
    userAgent?: true
    headers?: true
    timestamp?: true
    email?: true
    success?: true
    userId?: true
  }

  export type LoginAttemptCountAggregateInputType = {
    id?: true
    ip?: true
    userAgent?: true
    headers?: true
    timestamp?: true
    email?: true
    success?: true
    userId?: true
    _all?: true
  }

  export type LoginAttemptAggregateArgs = {
    /**
     * Filter which LoginAttempt to aggregate.
     * 
    **/
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<LoginAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned LoginAttempts
    **/
    _count?: true | LoginAttemptCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoginAttemptAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoginAttemptSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoginAttemptMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoginAttemptMaxAggregateInputType
  }

  export type GetLoginAttemptAggregateType<T extends LoginAttemptAggregateArgs> = {
        [P in keyof T & keyof AggregateLoginAttempt]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoginAttempt[P]>
      : GetScalarType<T[P], AggregateLoginAttempt[P]>
  }




  export type LoginAttemptGroupByArgs = {
    where?: LoginAttemptWhereInput
    orderBy?: Enumerable<LoginAttemptOrderByWithAggregationInput>
    by: Array<LoginAttemptScalarFieldEnum>
    having?: LoginAttemptScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoginAttemptCountAggregateInputType | true
    _avg?: LoginAttemptAvgAggregateInputType
    _sum?: LoginAttemptSumAggregateInputType
    _min?: LoginAttemptMinAggregateInputType
    _max?: LoginAttemptMaxAggregateInputType
  }


  export type LoginAttemptGroupByOutputType = {
    id: number
    ip: string
    userAgent: string
    headers: string
    timestamp: Date
    email: string
    success: boolean
    userId: string
    _count: LoginAttemptCountAggregateOutputType | null
    _avg: LoginAttemptAvgAggregateOutputType | null
    _sum: LoginAttemptSumAggregateOutputType | null
    _min: LoginAttemptMinAggregateOutputType | null
    _max: LoginAttemptMaxAggregateOutputType | null
  }

  type GetLoginAttemptGroupByPayload<T extends LoginAttemptGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LoginAttemptGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoginAttemptGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
            : GetScalarType<T[P], LoginAttemptGroupByOutputType[P]>
        }
      >
    >


  export type LoginAttemptSelect = {
    id?: boolean
    ip?: boolean
    userAgent?: boolean
    headers?: boolean
    timestamp?: boolean
    email?: boolean
    success?: boolean
    user?: boolean | EntityArgs
    userId?: boolean
  }

  export type LoginAttemptInclude = {
    user?: boolean | EntityArgs
  }

  export type LoginAttemptGetPayload<
    S extends boolean | null | undefined | LoginAttemptArgs,
    U = keyof S
      > = S extends true
        ? LoginAttempt
    : S extends undefined
    ? never
    : S extends LoginAttemptArgs | LoginAttemptFindManyArgs
    ?'include' extends U
    ? LoginAttempt  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? EntityGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? EntityGetPayload<S['select'][P]> :  P extends keyof LoginAttempt ? LoginAttempt[P] : never
  } 
    : LoginAttempt
  : LoginAttempt


  type LoginAttemptCountArgs = Merge<
    Omit<LoginAttemptFindManyArgs, 'select' | 'include'> & {
      select?: LoginAttemptCountAggregateInputType | true
    }
  >

  export interface LoginAttemptDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one LoginAttempt that matches the filter.
     * @param {LoginAttemptFindUniqueArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LoginAttemptFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LoginAttemptFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'LoginAttempt'> extends True ? CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>> : CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt | null >, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T> | null >>

    /**
     * Find the first LoginAttempt that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindFirstArgs} args - Arguments to find a LoginAttempt
     * @example
     * // Get one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LoginAttemptFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LoginAttemptFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'LoginAttempt'> extends True ? CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>> : CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt | null >, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T> | null >>

    /**
     * Find zero or more LoginAttempts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany()
     * 
     * // Get first 10 LoginAttempts
     * const loginAttempts = await prisma.loginAttempt.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loginAttemptWithIdOnly = await prisma.loginAttempt.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LoginAttemptFindManyArgs>(
      args?: SelectSubset<T, LoginAttemptFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<LoginAttempt>>, PrismaPromise<Array<LoginAttemptGetPayload<T>>>>

    /**
     * Create a LoginAttempt.
     * @param {LoginAttemptCreateArgs} args - Arguments to create a LoginAttempt.
     * @example
     * // Create one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.create({
     *   data: {
     *     // ... data to create a LoginAttempt
     *   }
     * })
     * 
    **/
    create<T extends LoginAttemptCreateArgs>(
      args: SelectSubset<T, LoginAttemptCreateArgs>
    ): CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>>

    /**
     * Delete a LoginAttempt.
     * @param {LoginAttemptDeleteArgs} args - Arguments to delete one LoginAttempt.
     * @example
     * // Delete one LoginAttempt
     * const LoginAttempt = await prisma.loginAttempt.delete({
     *   where: {
     *     // ... filter to delete one LoginAttempt
     *   }
     * })
     * 
    **/
    delete<T extends LoginAttemptDeleteArgs>(
      args: SelectSubset<T, LoginAttemptDeleteArgs>
    ): CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>>

    /**
     * Update one LoginAttempt.
     * @param {LoginAttemptUpdateArgs} args - Arguments to update one LoginAttempt.
     * @example
     * // Update one LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LoginAttemptUpdateArgs>(
      args: SelectSubset<T, LoginAttemptUpdateArgs>
    ): CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>>

    /**
     * Delete zero or more LoginAttempts.
     * @param {LoginAttemptDeleteManyArgs} args - Arguments to filter LoginAttempts to delete.
     * @example
     * // Delete a few LoginAttempts
     * const { count } = await prisma.loginAttempt.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LoginAttemptDeleteManyArgs>(
      args?: SelectSubset<T, LoginAttemptDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many LoginAttempts
     * const loginAttempt = await prisma.loginAttempt.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LoginAttemptUpdateManyArgs>(
      args: SelectSubset<T, LoginAttemptUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one LoginAttempt.
     * @param {LoginAttemptUpsertArgs} args - Arguments to update or create a LoginAttempt.
     * @example
     * // Update or create a LoginAttempt
     * const loginAttempt = await prisma.loginAttempt.upsert({
     *   create: {
     *     // ... data to create a LoginAttempt
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the LoginAttempt we want to update
     *   }
     * })
    **/
    upsert<T extends LoginAttemptUpsertArgs>(
      args: SelectSubset<T, LoginAttemptUpsertArgs>
    ): CheckSelect<T, Prisma__LoginAttemptClient<LoginAttempt>, Prisma__LoginAttemptClient<LoginAttemptGetPayload<T>>>

    /**
     * Count the number of LoginAttempts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptCountArgs} args - Arguments to filter LoginAttempts to count.
     * @example
     * // Count the number of LoginAttempts
     * const count = await prisma.loginAttempt.count({
     *   where: {
     *     // ... the filter for the LoginAttempts we want to count
     *   }
     * })
    **/
    count<T extends LoginAttemptCountArgs>(
      args?: Subset<T, LoginAttemptCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoginAttemptCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoginAttemptAggregateArgs>(args: Subset<T, LoginAttemptAggregateArgs>): PrismaPromise<GetLoginAttemptAggregateType<T>>

    /**
     * Group by LoginAttempt.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoginAttemptGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoginAttemptGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoginAttemptGroupByArgs['orderBy'] }
        : { orderBy?: LoginAttemptGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoginAttemptGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoginAttemptGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for LoginAttempt.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LoginAttemptClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * LoginAttempt findUnique
   */
  export type LoginAttemptFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * Throw an Error if a LoginAttempt can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which LoginAttempt to fetch.
     * 
    **/
    where: LoginAttemptWhereUniqueInput
  }


  /**
   * LoginAttempt findFirst
   */
  export type LoginAttemptFindFirstArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * Throw an Error if a LoginAttempt can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which LoginAttempt to fetch.
     * 
    **/
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<LoginAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for LoginAttempts.
     * 
    **/
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of LoginAttempts.
     * 
    **/
    distinct?: Enumerable<LoginAttemptScalarFieldEnum>
  }


  /**
   * LoginAttempt findMany
   */
  export type LoginAttemptFindManyArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * Filter, which LoginAttempts to fetch.
     * 
    **/
    where?: LoginAttemptWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of LoginAttempts to fetch.
     * 
    **/
    orderBy?: Enumerable<LoginAttemptOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing LoginAttempts.
     * 
    **/
    cursor?: LoginAttemptWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` LoginAttempts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` LoginAttempts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LoginAttemptScalarFieldEnum>
  }


  /**
   * LoginAttempt create
   */
  export type LoginAttemptCreateArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * The data needed to create a LoginAttempt.
     * 
    **/
    data: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
  }


  /**
   * LoginAttempt update
   */
  export type LoginAttemptUpdateArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * The data needed to update a LoginAttempt.
     * 
    **/
    data: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
    /**
     * Choose, which LoginAttempt to update.
     * 
    **/
    where: LoginAttemptWhereUniqueInput
  }


  /**
   * LoginAttempt updateMany
   */
  export type LoginAttemptUpdateManyArgs = {
    /**
     * The data used to update LoginAttempts.
     * 
    **/
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyInput>
    /**
     * Filter which LoginAttempts to update
     * 
    **/
    where?: LoginAttemptWhereInput
  }


  /**
   * LoginAttempt upsert
   */
  export type LoginAttemptUpsertArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * The filter to search for the LoginAttempt to update in case it exists.
     * 
    **/
    where: LoginAttemptWhereUniqueInput
    /**
     * In case the LoginAttempt found by the `where` argument doesn't exist, create a new LoginAttempt with this data.
     * 
    **/
    create: XOR<LoginAttemptCreateInput, LoginAttemptUncheckedCreateInput>
    /**
     * In case the LoginAttempt was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LoginAttemptUpdateInput, LoginAttemptUncheckedUpdateInput>
  }


  /**
   * LoginAttempt delete
   */
  export type LoginAttemptDeleteArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
    /**
     * Filter which LoginAttempt to delete.
     * 
    **/
    where: LoginAttemptWhereUniqueInput
  }


  /**
   * LoginAttempt deleteMany
   */
  export type LoginAttemptDeleteManyArgs = {
    /**
     * Filter which LoginAttempts to delete
     * 
    **/
    where?: LoginAttemptWhereInput
  }


  /**
   * LoginAttempt without action
   */
  export type LoginAttemptArgs = {
    /**
     * Select specific fields to fetch from the LoginAttempt
     * 
    **/
    select?: LoginAttemptSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LoginAttemptInclude | null
  }



  /**
   * Model GroupMembership
   */


  export type AggregateGroupMembership = {
    _count: GroupMembershipCountAggregateOutputType | null
    _min: GroupMembershipMinAggregateOutputType | null
    _max: GroupMembershipMaxAggregateOutputType | null
  }

  export type GroupMembershipMinAggregateOutputType = {
    id: string | null
    groupId: string | null
    memberId: string | null
    joinedAt: Date | null
  }

  export type GroupMembershipMaxAggregateOutputType = {
    id: string | null
    groupId: string | null
    memberId: string | null
    joinedAt: Date | null
  }

  export type GroupMembershipCountAggregateOutputType = {
    id: number
    groupId: number
    memberId: number
    joinedAt: number
    _all: number
  }


  export type GroupMembershipMinAggregateInputType = {
    id?: true
    groupId?: true
    memberId?: true
    joinedAt?: true
  }

  export type GroupMembershipMaxAggregateInputType = {
    id?: true
    groupId?: true
    memberId?: true
    joinedAt?: true
  }

  export type GroupMembershipCountAggregateInputType = {
    id?: true
    groupId?: true
    memberId?: true
    joinedAt?: true
    _all?: true
  }

  export type GroupMembershipAggregateArgs = {
    /**
     * Filter which GroupMembership to aggregate.
     * 
    **/
    where?: GroupMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMemberships to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupMembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: GroupMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMemberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMemberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GroupMemberships
    **/
    _count?: true | GroupMembershipCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GroupMembershipMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GroupMembershipMaxAggregateInputType
  }

  export type GetGroupMembershipAggregateType<T extends GroupMembershipAggregateArgs> = {
        [P in keyof T & keyof AggregateGroupMembership]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGroupMembership[P]>
      : GetScalarType<T[P], AggregateGroupMembership[P]>
  }




  export type GroupMembershipGroupByArgs = {
    where?: GroupMembershipWhereInput
    orderBy?: Enumerable<GroupMembershipOrderByWithAggregationInput>
    by: Array<GroupMembershipScalarFieldEnum>
    having?: GroupMembershipScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GroupMembershipCountAggregateInputType | true
    _min?: GroupMembershipMinAggregateInputType
    _max?: GroupMembershipMaxAggregateInputType
  }


  export type GroupMembershipGroupByOutputType = {
    id: string
    groupId: string
    memberId: string
    joinedAt: Date
    _count: GroupMembershipCountAggregateOutputType | null
    _min: GroupMembershipMinAggregateOutputType | null
    _max: GroupMembershipMaxAggregateOutputType | null
  }

  type GetGroupMembershipGroupByPayload<T extends GroupMembershipGroupByArgs> = PrismaPromise<
    Array<
      PickArray<GroupMembershipGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GroupMembershipGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GroupMembershipGroupByOutputType[P]>
            : GetScalarType<T[P], GroupMembershipGroupByOutputType[P]>
        }
      >
    >


  export type GroupMembershipSelect = {
    id?: boolean
    group?: boolean | EntityArgs
    groupId?: boolean
    member?: boolean | EntityArgs
    memberId?: boolean
    joinedAt?: boolean
  }

  export type GroupMembershipInclude = {
    group?: boolean | EntityArgs
    member?: boolean | EntityArgs
  }

  export type GroupMembershipGetPayload<
    S extends boolean | null | undefined | GroupMembershipArgs,
    U = keyof S
      > = S extends true
        ? GroupMembership
    : S extends undefined
    ? never
    : S extends GroupMembershipArgs | GroupMembershipFindManyArgs
    ?'include' extends U
    ? GroupMembership  & {
    [P in TrueKeys<S['include']>]:
        P extends 'group' ? EntityGetPayload<S['include'][P]> :
        P extends 'member' ? EntityGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'group' ? EntityGetPayload<S['select'][P]> :
        P extends 'member' ? EntityGetPayload<S['select'][P]> :  P extends keyof GroupMembership ? GroupMembership[P] : never
  } 
    : GroupMembership
  : GroupMembership


  type GroupMembershipCountArgs = Merge<
    Omit<GroupMembershipFindManyArgs, 'select' | 'include'> & {
      select?: GroupMembershipCountAggregateInputType | true
    }
  >

  export interface GroupMembershipDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one GroupMembership that matches the filter.
     * @param {GroupMembershipFindUniqueArgs} args - Arguments to find a GroupMembership
     * @example
     * // Get one GroupMembership
     * const groupMembership = await prisma.groupMembership.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GroupMembershipFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GroupMembershipFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GroupMembership'> extends True ? CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>> : CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership | null >, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T> | null >>

    /**
     * Find the first GroupMembership that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipFindFirstArgs} args - Arguments to find a GroupMembership
     * @example
     * // Get one GroupMembership
     * const groupMembership = await prisma.groupMembership.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GroupMembershipFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GroupMembershipFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GroupMembership'> extends True ? CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>> : CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership | null >, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T> | null >>

    /**
     * Find zero or more GroupMemberships that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GroupMemberships
     * const groupMemberships = await prisma.groupMembership.findMany()
     * 
     * // Get first 10 GroupMemberships
     * const groupMemberships = await prisma.groupMembership.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const groupMembershipWithIdOnly = await prisma.groupMembership.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GroupMembershipFindManyArgs>(
      args?: SelectSubset<T, GroupMembershipFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<GroupMembership>>, PrismaPromise<Array<GroupMembershipGetPayload<T>>>>

    /**
     * Create a GroupMembership.
     * @param {GroupMembershipCreateArgs} args - Arguments to create a GroupMembership.
     * @example
     * // Create one GroupMembership
     * const GroupMembership = await prisma.groupMembership.create({
     *   data: {
     *     // ... data to create a GroupMembership
     *   }
     * })
     * 
    **/
    create<T extends GroupMembershipCreateArgs>(
      args: SelectSubset<T, GroupMembershipCreateArgs>
    ): CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>>

    /**
     * Delete a GroupMembership.
     * @param {GroupMembershipDeleteArgs} args - Arguments to delete one GroupMembership.
     * @example
     * // Delete one GroupMembership
     * const GroupMembership = await prisma.groupMembership.delete({
     *   where: {
     *     // ... filter to delete one GroupMembership
     *   }
     * })
     * 
    **/
    delete<T extends GroupMembershipDeleteArgs>(
      args: SelectSubset<T, GroupMembershipDeleteArgs>
    ): CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>>

    /**
     * Update one GroupMembership.
     * @param {GroupMembershipUpdateArgs} args - Arguments to update one GroupMembership.
     * @example
     * // Update one GroupMembership
     * const groupMembership = await prisma.groupMembership.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GroupMembershipUpdateArgs>(
      args: SelectSubset<T, GroupMembershipUpdateArgs>
    ): CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>>

    /**
     * Delete zero or more GroupMemberships.
     * @param {GroupMembershipDeleteManyArgs} args - Arguments to filter GroupMemberships to delete.
     * @example
     * // Delete a few GroupMemberships
     * const { count } = await prisma.groupMembership.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GroupMembershipDeleteManyArgs>(
      args?: SelectSubset<T, GroupMembershipDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more GroupMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GroupMemberships
     * const groupMembership = await prisma.groupMembership.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GroupMembershipUpdateManyArgs>(
      args: SelectSubset<T, GroupMembershipUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one GroupMembership.
     * @param {GroupMembershipUpsertArgs} args - Arguments to update or create a GroupMembership.
     * @example
     * // Update or create a GroupMembership
     * const groupMembership = await prisma.groupMembership.upsert({
     *   create: {
     *     // ... data to create a GroupMembership
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GroupMembership we want to update
     *   }
     * })
    **/
    upsert<T extends GroupMembershipUpsertArgs>(
      args: SelectSubset<T, GroupMembershipUpsertArgs>
    ): CheckSelect<T, Prisma__GroupMembershipClient<GroupMembership>, Prisma__GroupMembershipClient<GroupMembershipGetPayload<T>>>

    /**
     * Count the number of GroupMemberships.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipCountArgs} args - Arguments to filter GroupMemberships to count.
     * @example
     * // Count the number of GroupMemberships
     * const count = await prisma.groupMembership.count({
     *   where: {
     *     // ... the filter for the GroupMemberships we want to count
     *   }
     * })
    **/
    count<T extends GroupMembershipCountArgs>(
      args?: Subset<T, GroupMembershipCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GroupMembershipCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GroupMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GroupMembershipAggregateArgs>(args: Subset<T, GroupMembershipAggregateArgs>): PrismaPromise<GetGroupMembershipAggregateType<T>>

    /**
     * Group by GroupMembership.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GroupMembershipGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GroupMembershipGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GroupMembershipGroupByArgs['orderBy'] }
        : { orderBy?: GroupMembershipGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GroupMembershipGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMembershipGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for GroupMembership.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GroupMembershipClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    group<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    member<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * GroupMembership findUnique
   */
  export type GroupMembershipFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * Throw an Error if a GroupMembership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GroupMembership to fetch.
     * 
    **/
    where: GroupMembershipWhereUniqueInput
  }


  /**
   * GroupMembership findFirst
   */
  export type GroupMembershipFindFirstArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * Throw an Error if a GroupMembership can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which GroupMembership to fetch.
     * 
    **/
    where?: GroupMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMemberships to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupMembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GroupMemberships.
     * 
    **/
    cursor?: GroupMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMemberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMemberships.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GroupMemberships.
     * 
    **/
    distinct?: Enumerable<GroupMembershipScalarFieldEnum>
  }


  /**
   * GroupMembership findMany
   */
  export type GroupMembershipFindManyArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * Filter, which GroupMemberships to fetch.
     * 
    **/
    where?: GroupMembershipWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GroupMemberships to fetch.
     * 
    **/
    orderBy?: Enumerable<GroupMembershipOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GroupMemberships.
     * 
    **/
    cursor?: GroupMembershipWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GroupMemberships from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GroupMemberships.
     * 
    **/
    skip?: number
    distinct?: Enumerable<GroupMembershipScalarFieldEnum>
  }


  /**
   * GroupMembership create
   */
  export type GroupMembershipCreateArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * The data needed to create a GroupMembership.
     * 
    **/
    data: XOR<GroupMembershipCreateInput, GroupMembershipUncheckedCreateInput>
  }


  /**
   * GroupMembership update
   */
  export type GroupMembershipUpdateArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * The data needed to update a GroupMembership.
     * 
    **/
    data: XOR<GroupMembershipUpdateInput, GroupMembershipUncheckedUpdateInput>
    /**
     * Choose, which GroupMembership to update.
     * 
    **/
    where: GroupMembershipWhereUniqueInput
  }


  /**
   * GroupMembership updateMany
   */
  export type GroupMembershipUpdateManyArgs = {
    /**
     * The data used to update GroupMemberships.
     * 
    **/
    data: XOR<GroupMembershipUpdateManyMutationInput, GroupMembershipUncheckedUpdateManyInput>
    /**
     * Filter which GroupMemberships to update
     * 
    **/
    where?: GroupMembershipWhereInput
  }


  /**
   * GroupMembership upsert
   */
  export type GroupMembershipUpsertArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * The filter to search for the GroupMembership to update in case it exists.
     * 
    **/
    where: GroupMembershipWhereUniqueInput
    /**
     * In case the GroupMembership found by the `where` argument doesn't exist, create a new GroupMembership with this data.
     * 
    **/
    create: XOR<GroupMembershipCreateInput, GroupMembershipUncheckedCreateInput>
    /**
     * In case the GroupMembership was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<GroupMembershipUpdateInput, GroupMembershipUncheckedUpdateInput>
  }


  /**
   * GroupMembership delete
   */
  export type GroupMembershipDeleteArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
    /**
     * Filter which GroupMembership to delete.
     * 
    **/
    where: GroupMembershipWhereUniqueInput
  }


  /**
   * GroupMembership deleteMany
   */
  export type GroupMembershipDeleteManyArgs = {
    /**
     * Filter which GroupMemberships to delete
     * 
    **/
    where?: GroupMembershipWhereInput
  }


  /**
   * GroupMembership without action
   */
  export type GroupMembershipArgs = {
    /**
     * Select specific fields to fetch from the GroupMembership
     * 
    **/
    select?: GroupMembershipSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: GroupMembershipInclude | null
  }



  /**
   * Model Entity
   */


  export type AggregateEntity = {
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  export type EntityMinAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    picture: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
    pswHash: string | null
    ownerId: string | null
  }

  export type EntityMaxAggregateOutputType = {
    id: string | null
    type: string | null
    name: string | null
    picture: string | null
    createdAt: Date | null
    updatedAt: Date | null
    deleted: boolean | null
    deletedAt: Date | null
    pswHash: string | null
    ownerId: string | null
  }

  export type EntityCountAggregateOutputType = {
    id: number
    type: number
    name: number
    picture: number
    createdAt: number
    updatedAt: number
    deleted: number
    deletedAt: number
    pswHash: number
    ownerId: number
    _all: number
  }


  export type EntityMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    picture?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
    pswHash?: true
    ownerId?: true
  }

  export type EntityMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    picture?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
    pswHash?: true
    ownerId?: true
  }

  export type EntityCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    picture?: true
    createdAt?: true
    updatedAt?: true
    deleted?: true
    deletedAt?: true
    pswHash?: true
    ownerId?: true
    _all?: true
  }

  export type EntityAggregateArgs = {
    /**
     * Filter which Entity to aggregate.
     * 
    **/
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     * 
    **/
    orderBy?: Enumerable<EntityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entities
    **/
    _count?: true | EntityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntityMaxAggregateInputType
  }

  export type GetEntityAggregateType<T extends EntityAggregateArgs> = {
        [P in keyof T & keyof AggregateEntity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntity[P]>
      : GetScalarType<T[P], AggregateEntity[P]>
  }




  export type EntityGroupByArgs = {
    where?: EntityWhereInput
    orderBy?: Enumerable<EntityOrderByWithAggregationInput>
    by: Array<EntityScalarFieldEnum>
    having?: EntityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntityCountAggregateInputType | true
    _min?: EntityMinAggregateInputType
    _max?: EntityMaxAggregateInputType
  }


  export type EntityGroupByOutputType = {
    id: string
    type: string
    name: string
    picture: string
    createdAt: Date
    updatedAt: Date
    deleted: boolean
    deletedAt: Date | null
    pswHash: string | null
    ownerId: string | null
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  type GetEntityGroupByPayload<T extends EntityGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EntityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntityGroupByOutputType[P]>
            : GetScalarType<T[P], EntityGroupByOutputType[P]>
        }
      >
    >


  export type EntitySelect = {
    id?: boolean
    type?: boolean
    name?: boolean
    picture?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deleted?: boolean
    deletedAt?: boolean
    memberOfGroups?: boolean | GroupMembershipFindManyArgs
    permissionsAssignedToMe?: boolean | ExplicitPermissionFindManyArgs
    emails?: boolean | EmailFindManyArgs
    loginAttempts?: boolean | LoginAttemptFindManyArgs
    pswHash?: boolean
    ownerOfGroups?: boolean | EntityFindManyArgs
    explicitPermissionsCreated?: boolean | ExplicitPermissionFindManyArgs
    owner?: boolean | EntityArgs
    ownerId?: boolean
    groupMembershipRelations?: boolean | GroupMembershipFindManyArgs
    _count?: boolean | EntityCountOutputTypeArgs
  }

  export type EntityInclude = {
    memberOfGroups?: boolean | GroupMembershipFindManyArgs
    permissionsAssignedToMe?: boolean | ExplicitPermissionFindManyArgs
    emails?: boolean | EmailFindManyArgs
    loginAttempts?: boolean | LoginAttemptFindManyArgs
    ownerOfGroups?: boolean | EntityFindManyArgs
    explicitPermissionsCreated?: boolean | ExplicitPermissionFindManyArgs
    owner?: boolean | EntityArgs
    groupMembershipRelations?: boolean | GroupMembershipFindManyArgs
    _count?: boolean | EntityCountOutputTypeArgs
  }

  export type EntityGetPayload<
    S extends boolean | null | undefined | EntityArgs,
    U = keyof S
      > = S extends true
        ? Entity
    : S extends undefined
    ? never
    : S extends EntityArgs | EntityFindManyArgs
    ?'include' extends U
    ? Entity  & {
    [P in TrueKeys<S['include']>]:
        P extends 'memberOfGroups' ? Array < GroupMembershipGetPayload<S['include'][P]>>  :
        P extends 'permissionsAssignedToMe' ? Array < ExplicitPermissionGetPayload<S['include'][P]>>  :
        P extends 'emails' ? Array < EmailGetPayload<S['include'][P]>>  :
        P extends 'loginAttempts' ? Array < LoginAttemptGetPayload<S['include'][P]>>  :
        P extends 'ownerOfGroups' ? Array < EntityGetPayload<S['include'][P]>>  :
        P extends 'explicitPermissionsCreated' ? Array < ExplicitPermissionGetPayload<S['include'][P]>>  :
        P extends 'owner' ? EntityGetPayload<S['include'][P]> | null :
        P extends 'groupMembershipRelations' ? Array < GroupMembershipGetPayload<S['include'][P]>>  :
        P extends '_count' ? EntityCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'memberOfGroups' ? Array < GroupMembershipGetPayload<S['select'][P]>>  :
        P extends 'permissionsAssignedToMe' ? Array < ExplicitPermissionGetPayload<S['select'][P]>>  :
        P extends 'emails' ? Array < EmailGetPayload<S['select'][P]>>  :
        P extends 'loginAttempts' ? Array < LoginAttemptGetPayload<S['select'][P]>>  :
        P extends 'ownerOfGroups' ? Array < EntityGetPayload<S['select'][P]>>  :
        P extends 'explicitPermissionsCreated' ? Array < ExplicitPermissionGetPayload<S['select'][P]>>  :
        P extends 'owner' ? EntityGetPayload<S['select'][P]> | null :
        P extends 'groupMembershipRelations' ? Array < GroupMembershipGetPayload<S['select'][P]>>  :
        P extends '_count' ? EntityCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Entity ? Entity[P] : never
  } 
    : Entity
  : Entity


  type EntityCountArgs = Merge<
    Omit<EntityFindManyArgs, 'select' | 'include'> & {
      select?: EntityCountAggregateInputType | true
    }
  >

  export interface EntityDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Entity that matches the filter.
     * @param {EntityFindUniqueArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EntityFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EntityFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Entity'> extends True ? CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>> : CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>

    /**
     * Find the first Entity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EntityFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EntityFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Entity'> extends True ? CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>> : CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>

    /**
     * Find zero or more Entities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entities
     * const entities = await prisma.entity.findMany()
     * 
     * // Get first 10 Entities
     * const entities = await prisma.entity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entityWithIdOnly = await prisma.entity.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EntityFindManyArgs>(
      args?: SelectSubset<T, EntityFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Entity>>, PrismaPromise<Array<EntityGetPayload<T>>>>

    /**
     * Create a Entity.
     * @param {EntityCreateArgs} args - Arguments to create a Entity.
     * @example
     * // Create one Entity
     * const Entity = await prisma.entity.create({
     *   data: {
     *     // ... data to create a Entity
     *   }
     * })
     * 
    **/
    create<T extends EntityCreateArgs>(
      args: SelectSubset<T, EntityCreateArgs>
    ): CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>>

    /**
     * Delete a Entity.
     * @param {EntityDeleteArgs} args - Arguments to delete one Entity.
     * @example
     * // Delete one Entity
     * const Entity = await prisma.entity.delete({
     *   where: {
     *     // ... filter to delete one Entity
     *   }
     * })
     * 
    **/
    delete<T extends EntityDeleteArgs>(
      args: SelectSubset<T, EntityDeleteArgs>
    ): CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>>

    /**
     * Update one Entity.
     * @param {EntityUpdateArgs} args - Arguments to update one Entity.
     * @example
     * // Update one Entity
     * const entity = await prisma.entity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EntityUpdateArgs>(
      args: SelectSubset<T, EntityUpdateArgs>
    ): CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>>

    /**
     * Delete zero or more Entities.
     * @param {EntityDeleteManyArgs} args - Arguments to filter Entities to delete.
     * @example
     * // Delete a few Entities
     * const { count } = await prisma.entity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EntityDeleteManyArgs>(
      args?: SelectSubset<T, EntityDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entities
     * const entity = await prisma.entity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EntityUpdateManyArgs>(
      args: SelectSubset<T, EntityUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Entity.
     * @param {EntityUpsertArgs} args - Arguments to update or create a Entity.
     * @example
     * // Update or create a Entity
     * const entity = await prisma.entity.upsert({
     *   create: {
     *     // ... data to create a Entity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entity we want to update
     *   }
     * })
    **/
    upsert<T extends EntityUpsertArgs>(
      args: SelectSubset<T, EntityUpsertArgs>
    ): CheckSelect<T, Prisma__EntityClient<Entity>, Prisma__EntityClient<EntityGetPayload<T>>>

    /**
     * Count the number of Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityCountArgs} args - Arguments to filter Entities to count.
     * @example
     * // Count the number of Entities
     * const count = await prisma.entity.count({
     *   where: {
     *     // ... the filter for the Entities we want to count
     *   }
     * })
    **/
    count<T extends EntityCountArgs>(
      args?: Subset<T, EntityCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntityAggregateArgs>(args: Subset<T, EntityAggregateArgs>): PrismaPromise<GetEntityAggregateType<T>>

    /**
     * Group by Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntityGroupByArgs['orderBy'] }
        : { orderBy?: EntityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EntityClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    memberOfGroups<T extends GroupMembershipFindManyArgs = {}>(args?: Subset<T, GroupMembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupMembership>>, PrismaPromise<Array<GroupMembershipGetPayload<T>>>>;

    permissionsAssignedToMe<T extends ExplicitPermissionFindManyArgs = {}>(args?: Subset<T, ExplicitPermissionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ExplicitPermission>>, PrismaPromise<Array<ExplicitPermissionGetPayload<T>>>>;

    emails<T extends EmailFindManyArgs = {}>(args?: Subset<T, EmailFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Email>>, PrismaPromise<Array<EmailGetPayload<T>>>>;

    loginAttempts<T extends LoginAttemptFindManyArgs = {}>(args?: Subset<T, LoginAttemptFindManyArgs>): CheckSelect<T, PrismaPromise<Array<LoginAttempt>>, PrismaPromise<Array<LoginAttemptGetPayload<T>>>>;

    ownerOfGroups<T extends EntityFindManyArgs = {}>(args?: Subset<T, EntityFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Entity>>, PrismaPromise<Array<EntityGetPayload<T>>>>;

    explicitPermissionsCreated<T extends ExplicitPermissionFindManyArgs = {}>(args?: Subset<T, ExplicitPermissionFindManyArgs>): CheckSelect<T, PrismaPromise<Array<ExplicitPermission>>, PrismaPromise<Array<ExplicitPermissionGetPayload<T>>>>;

    owner<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    groupMembershipRelations<T extends GroupMembershipFindManyArgs = {}>(args?: Subset<T, GroupMembershipFindManyArgs>): CheckSelect<T, PrismaPromise<Array<GroupMembership>>, PrismaPromise<Array<GroupMembershipGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Entity findUnique
   */
  export type EntityFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * Throw an Error if a Entity can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Entity to fetch.
     * 
    **/
    where: EntityWhereUniqueInput
  }


  /**
   * Entity findFirst
   */
  export type EntityFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * Throw an Error if a Entity can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Entity to fetch.
     * 
    **/
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     * 
    **/
    orderBy?: Enumerable<EntityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     * 
    **/
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     * 
    **/
    distinct?: Enumerable<EntityScalarFieldEnum>
  }


  /**
   * Entity findMany
   */
  export type EntityFindManyArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * Filter, which Entities to fetch.
     * 
    **/
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     * 
    **/
    orderBy?: Enumerable<EntityOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entities.
     * 
    **/
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EntityScalarFieldEnum>
  }


  /**
   * Entity create
   */
  export type EntityCreateArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * The data needed to create a Entity.
     * 
    **/
    data: XOR<EntityCreateInput, EntityUncheckedCreateInput>
  }


  /**
   * Entity update
   */
  export type EntityUpdateArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * The data needed to update a Entity.
     * 
    **/
    data: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
    /**
     * Choose, which Entity to update.
     * 
    **/
    where: EntityWhereUniqueInput
  }


  /**
   * Entity updateMany
   */
  export type EntityUpdateManyArgs = {
    /**
     * The data used to update Entities.
     * 
    **/
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyInput>
    /**
     * Filter which Entities to update
     * 
    **/
    where?: EntityWhereInput
  }


  /**
   * Entity upsert
   */
  export type EntityUpsertArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * The filter to search for the Entity to update in case it exists.
     * 
    **/
    where: EntityWhereUniqueInput
    /**
     * In case the Entity found by the `where` argument doesn't exist, create a new Entity with this data.
     * 
    **/
    create: XOR<EntityCreateInput, EntityUncheckedCreateInput>
    /**
     * In case the Entity was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
  }


  /**
   * Entity delete
   */
  export type EntityDeleteArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
    /**
     * Filter which Entity to delete.
     * 
    **/
    where: EntityWhereUniqueInput
  }


  /**
   * Entity deleteMany
   */
  export type EntityDeleteManyArgs = {
    /**
     * Filter which Entities to delete
     * 
    **/
    where?: EntityWhereInput
  }


  /**
   * Entity without action
   */
  export type EntityArgs = {
    /**
     * Select specific fields to fetch from the Entity
     * 
    **/
    select?: EntitySelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: EntityInclude | null
  }



  /**
   * Model ExplicitPermission
   */


  export type AggregateExplicitPermission = {
    _count: ExplicitPermissionCountAggregateOutputType | null
    _min: ExplicitPermissionMinAggregateOutputType | null
    _max: ExplicitPermissionMaxAggregateOutputType | null
  }

  export type ExplicitPermissionMinAggregateOutputType = {
    id: string | null
    path: string | null
    appliesToEntityId: string | null
    permissionLevel: string | null
    createdOn: Date | null
    createdById: string | null
  }

  export type ExplicitPermissionMaxAggregateOutputType = {
    id: string | null
    path: string | null
    appliesToEntityId: string | null
    permissionLevel: string | null
    createdOn: Date | null
    createdById: string | null
  }

  export type ExplicitPermissionCountAggregateOutputType = {
    id: number
    path: number
    appliesToEntityId: number
    permissionLevel: number
    createdOn: number
    createdById: number
    _all: number
  }


  export type ExplicitPermissionMinAggregateInputType = {
    id?: true
    path?: true
    appliesToEntityId?: true
    permissionLevel?: true
    createdOn?: true
    createdById?: true
  }

  export type ExplicitPermissionMaxAggregateInputType = {
    id?: true
    path?: true
    appliesToEntityId?: true
    permissionLevel?: true
    createdOn?: true
    createdById?: true
  }

  export type ExplicitPermissionCountAggregateInputType = {
    id?: true
    path?: true
    appliesToEntityId?: true
    permissionLevel?: true
    createdOn?: true
    createdById?: true
    _all?: true
  }

  export type ExplicitPermissionAggregateArgs = {
    /**
     * Filter which ExplicitPermission to aggregate.
     * 
    **/
    where?: ExplicitPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExplicitPermissions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExplicitPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: ExplicitPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExplicitPermissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExplicitPermissions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExplicitPermissions
    **/
    _count?: true | ExplicitPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExplicitPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExplicitPermissionMaxAggregateInputType
  }

  export type GetExplicitPermissionAggregateType<T extends ExplicitPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateExplicitPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExplicitPermission[P]>
      : GetScalarType<T[P], AggregateExplicitPermission[P]>
  }




  export type ExplicitPermissionGroupByArgs = {
    where?: ExplicitPermissionWhereInput
    orderBy?: Enumerable<ExplicitPermissionOrderByWithAggregationInput>
    by: Array<ExplicitPermissionScalarFieldEnum>
    having?: ExplicitPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExplicitPermissionCountAggregateInputType | true
    _min?: ExplicitPermissionMinAggregateInputType
    _max?: ExplicitPermissionMaxAggregateInputType
  }


  export type ExplicitPermissionGroupByOutputType = {
    id: string
    path: string
    appliesToEntityId: string
    permissionLevel: string
    createdOn: Date
    createdById: string
    _count: ExplicitPermissionCountAggregateOutputType | null
    _min: ExplicitPermissionMinAggregateOutputType | null
    _max: ExplicitPermissionMaxAggregateOutputType | null
  }

  type GetExplicitPermissionGroupByPayload<T extends ExplicitPermissionGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ExplicitPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExplicitPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExplicitPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], ExplicitPermissionGroupByOutputType[P]>
        }
      >
    >


  export type ExplicitPermissionSelect = {
    id?: boolean
    path?: boolean
    appliesTo?: boolean | EntityArgs
    appliesToEntityId?: boolean
    permissionLevel?: boolean
    createdOn?: boolean
    createdBy?: boolean | EntityArgs
    createdById?: boolean
  }

  export type ExplicitPermissionInclude = {
    appliesTo?: boolean | EntityArgs
    createdBy?: boolean | EntityArgs
  }

  export type ExplicitPermissionGetPayload<
    S extends boolean | null | undefined | ExplicitPermissionArgs,
    U = keyof S
      > = S extends true
        ? ExplicitPermission
    : S extends undefined
    ? never
    : S extends ExplicitPermissionArgs | ExplicitPermissionFindManyArgs
    ?'include' extends U
    ? ExplicitPermission  & {
    [P in TrueKeys<S['include']>]:
        P extends 'appliesTo' ? EntityGetPayload<S['include'][P]> :
        P extends 'createdBy' ? EntityGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'appliesTo' ? EntityGetPayload<S['select'][P]> :
        P extends 'createdBy' ? EntityGetPayload<S['select'][P]> :  P extends keyof ExplicitPermission ? ExplicitPermission[P] : never
  } 
    : ExplicitPermission
  : ExplicitPermission


  type ExplicitPermissionCountArgs = Merge<
    Omit<ExplicitPermissionFindManyArgs, 'select' | 'include'> & {
      select?: ExplicitPermissionCountAggregateInputType | true
    }
  >

  export interface ExplicitPermissionDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one ExplicitPermission that matches the filter.
     * @param {ExplicitPermissionFindUniqueArgs} args - Arguments to find a ExplicitPermission
     * @example
     * // Get one ExplicitPermission
     * const explicitPermission = await prisma.explicitPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExplicitPermissionFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ExplicitPermissionFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ExplicitPermission'> extends True ? CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>> : CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission | null >, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T> | null >>

    /**
     * Find the first ExplicitPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionFindFirstArgs} args - Arguments to find a ExplicitPermission
     * @example
     * // Get one ExplicitPermission
     * const explicitPermission = await prisma.explicitPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExplicitPermissionFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ExplicitPermissionFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ExplicitPermission'> extends True ? CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>> : CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission | null >, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T> | null >>

    /**
     * Find zero or more ExplicitPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExplicitPermissions
     * const explicitPermissions = await prisma.explicitPermission.findMany()
     * 
     * // Get first 10 ExplicitPermissions
     * const explicitPermissions = await prisma.explicitPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const explicitPermissionWithIdOnly = await prisma.explicitPermission.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExplicitPermissionFindManyArgs>(
      args?: SelectSubset<T, ExplicitPermissionFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<ExplicitPermission>>, PrismaPromise<Array<ExplicitPermissionGetPayload<T>>>>

    /**
     * Create a ExplicitPermission.
     * @param {ExplicitPermissionCreateArgs} args - Arguments to create a ExplicitPermission.
     * @example
     * // Create one ExplicitPermission
     * const ExplicitPermission = await prisma.explicitPermission.create({
     *   data: {
     *     // ... data to create a ExplicitPermission
     *   }
     * })
     * 
    **/
    create<T extends ExplicitPermissionCreateArgs>(
      args: SelectSubset<T, ExplicitPermissionCreateArgs>
    ): CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>>

    /**
     * Delete a ExplicitPermission.
     * @param {ExplicitPermissionDeleteArgs} args - Arguments to delete one ExplicitPermission.
     * @example
     * // Delete one ExplicitPermission
     * const ExplicitPermission = await prisma.explicitPermission.delete({
     *   where: {
     *     // ... filter to delete one ExplicitPermission
     *   }
     * })
     * 
    **/
    delete<T extends ExplicitPermissionDeleteArgs>(
      args: SelectSubset<T, ExplicitPermissionDeleteArgs>
    ): CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>>

    /**
     * Update one ExplicitPermission.
     * @param {ExplicitPermissionUpdateArgs} args - Arguments to update one ExplicitPermission.
     * @example
     * // Update one ExplicitPermission
     * const explicitPermission = await prisma.explicitPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExplicitPermissionUpdateArgs>(
      args: SelectSubset<T, ExplicitPermissionUpdateArgs>
    ): CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>>

    /**
     * Delete zero or more ExplicitPermissions.
     * @param {ExplicitPermissionDeleteManyArgs} args - Arguments to filter ExplicitPermissions to delete.
     * @example
     * // Delete a few ExplicitPermissions
     * const { count } = await prisma.explicitPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExplicitPermissionDeleteManyArgs>(
      args?: SelectSubset<T, ExplicitPermissionDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExplicitPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExplicitPermissions
     * const explicitPermission = await prisma.explicitPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExplicitPermissionUpdateManyArgs>(
      args: SelectSubset<T, ExplicitPermissionUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one ExplicitPermission.
     * @param {ExplicitPermissionUpsertArgs} args - Arguments to update or create a ExplicitPermission.
     * @example
     * // Update or create a ExplicitPermission
     * const explicitPermission = await prisma.explicitPermission.upsert({
     *   create: {
     *     // ... data to create a ExplicitPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExplicitPermission we want to update
     *   }
     * })
    **/
    upsert<T extends ExplicitPermissionUpsertArgs>(
      args: SelectSubset<T, ExplicitPermissionUpsertArgs>
    ): CheckSelect<T, Prisma__ExplicitPermissionClient<ExplicitPermission>, Prisma__ExplicitPermissionClient<ExplicitPermissionGetPayload<T>>>

    /**
     * Count the number of ExplicitPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionCountArgs} args - Arguments to filter ExplicitPermissions to count.
     * @example
     * // Count the number of ExplicitPermissions
     * const count = await prisma.explicitPermission.count({
     *   where: {
     *     // ... the filter for the ExplicitPermissions we want to count
     *   }
     * })
    **/
    count<T extends ExplicitPermissionCountArgs>(
      args?: Subset<T, ExplicitPermissionCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExplicitPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExplicitPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExplicitPermissionAggregateArgs>(args: Subset<T, ExplicitPermissionAggregateArgs>): PrismaPromise<GetExplicitPermissionAggregateType<T>>

    /**
     * Group by ExplicitPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExplicitPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExplicitPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExplicitPermissionGroupByArgs['orderBy'] }
        : { orderBy?: ExplicitPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExplicitPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExplicitPermissionGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExplicitPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ExplicitPermissionClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    appliesTo<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    createdBy<T extends EntityArgs = {}>(args?: Subset<T, EntityArgs>): CheckSelect<T, Prisma__EntityClient<Entity | null >, Prisma__EntityClient<EntityGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * ExplicitPermission findUnique
   */
  export type ExplicitPermissionFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * Throw an Error if a ExplicitPermission can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ExplicitPermission to fetch.
     * 
    **/
    where: ExplicitPermissionWhereUniqueInput
  }


  /**
   * ExplicitPermission findFirst
   */
  export type ExplicitPermissionFindFirstArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * Throw an Error if a ExplicitPermission can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which ExplicitPermission to fetch.
     * 
    **/
    where?: ExplicitPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExplicitPermissions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExplicitPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExplicitPermissions.
     * 
    **/
    cursor?: ExplicitPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExplicitPermissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExplicitPermissions.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExplicitPermissions.
     * 
    **/
    distinct?: Enumerable<ExplicitPermissionScalarFieldEnum>
  }


  /**
   * ExplicitPermission findMany
   */
  export type ExplicitPermissionFindManyArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * Filter, which ExplicitPermissions to fetch.
     * 
    **/
    where?: ExplicitPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExplicitPermissions to fetch.
     * 
    **/
    orderBy?: Enumerable<ExplicitPermissionOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExplicitPermissions.
     * 
    **/
    cursor?: ExplicitPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExplicitPermissions from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExplicitPermissions.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ExplicitPermissionScalarFieldEnum>
  }


  /**
   * ExplicitPermission create
   */
  export type ExplicitPermissionCreateArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * The data needed to create a ExplicitPermission.
     * 
    **/
    data: XOR<ExplicitPermissionCreateInput, ExplicitPermissionUncheckedCreateInput>
  }


  /**
   * ExplicitPermission update
   */
  export type ExplicitPermissionUpdateArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * The data needed to update a ExplicitPermission.
     * 
    **/
    data: XOR<ExplicitPermissionUpdateInput, ExplicitPermissionUncheckedUpdateInput>
    /**
     * Choose, which ExplicitPermission to update.
     * 
    **/
    where: ExplicitPermissionWhereUniqueInput
  }


  /**
   * ExplicitPermission updateMany
   */
  export type ExplicitPermissionUpdateManyArgs = {
    /**
     * The data used to update ExplicitPermissions.
     * 
    **/
    data: XOR<ExplicitPermissionUpdateManyMutationInput, ExplicitPermissionUncheckedUpdateManyInput>
    /**
     * Filter which ExplicitPermissions to update
     * 
    **/
    where?: ExplicitPermissionWhereInput
  }


  /**
   * ExplicitPermission upsert
   */
  export type ExplicitPermissionUpsertArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * The filter to search for the ExplicitPermission to update in case it exists.
     * 
    **/
    where: ExplicitPermissionWhereUniqueInput
    /**
     * In case the ExplicitPermission found by the `where` argument doesn't exist, create a new ExplicitPermission with this data.
     * 
    **/
    create: XOR<ExplicitPermissionCreateInput, ExplicitPermissionUncheckedCreateInput>
    /**
     * In case the ExplicitPermission was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<ExplicitPermissionUpdateInput, ExplicitPermissionUncheckedUpdateInput>
  }


  /**
   * ExplicitPermission delete
   */
  export type ExplicitPermissionDeleteArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
    /**
     * Filter which ExplicitPermission to delete.
     * 
    **/
    where: ExplicitPermissionWhereUniqueInput
  }


  /**
   * ExplicitPermission deleteMany
   */
  export type ExplicitPermissionDeleteManyArgs = {
    /**
     * Filter which ExplicitPermissions to delete
     * 
    **/
    where?: ExplicitPermissionWhereInput
  }


  /**
   * ExplicitPermission without action
   */
  export type ExplicitPermissionArgs = {
    /**
     * Select specific fields to fetch from the ExplicitPermission
     * 
    **/
    select?: ExplicitPermissionSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: ExplicitPermissionInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const EmailScalarFieldEnum: {
    id: 'id',
    email: 'email',
    needsVerification: 'needsVerification',
    verificationCode: 'verificationCode',
    verificationCodeSentOn: 'verificationCodeSentOn',
    userId: 'userId',
    primary: 'primary'
  };

  export type EmailScalarFieldEnum = (typeof EmailScalarFieldEnum)[keyof typeof EmailScalarFieldEnum]


  export const LoginAttemptScalarFieldEnum: {
    id: 'id',
    ip: 'ip',
    userAgent: 'userAgent',
    headers: 'headers',
    timestamp: 'timestamp',
    email: 'email',
    success: 'success',
    userId: 'userId'
  };

  export type LoginAttemptScalarFieldEnum = (typeof LoginAttemptScalarFieldEnum)[keyof typeof LoginAttemptScalarFieldEnum]


  export const GroupMembershipScalarFieldEnum: {
    id: 'id',
    groupId: 'groupId',
    memberId: 'memberId',
    joinedAt: 'joinedAt'
  };

  export type GroupMembershipScalarFieldEnum = (typeof GroupMembershipScalarFieldEnum)[keyof typeof GroupMembershipScalarFieldEnum]


  export const EntityScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    picture: 'picture',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deleted: 'deleted',
    deletedAt: 'deletedAt',
    pswHash: 'pswHash',
    ownerId: 'ownerId'
  };

  export type EntityScalarFieldEnum = (typeof EntityScalarFieldEnum)[keyof typeof EntityScalarFieldEnum]


  export const ExplicitPermissionScalarFieldEnum: {
    id: 'id',
    path: 'path',
    appliesToEntityId: 'appliesToEntityId',
    permissionLevel: 'permissionLevel',
    createdOn: 'createdOn',
    createdById: 'createdById'
  };

  export type ExplicitPermissionScalarFieldEnum = (typeof ExplicitPermissionScalarFieldEnum)[keyof typeof ExplicitPermissionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type EmailWhereInput = {
    AND?: Enumerable<EmailWhereInput>
    OR?: Enumerable<EmailWhereInput>
    NOT?: Enumerable<EmailWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    needsVerification?: BoolFilter | boolean
    verificationCode?: StringNullableFilter | string | null
    verificationCodeSentOn?: DateTimeNullableFilter | Date | string | null
    user?: XOR<EntityRelationFilter, EntityWhereInput>
    userId?: StringFilter | string
    primary?: BoolFilter | boolean
  }

  export type EmailOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    needsVerification?: SortOrder
    verificationCode?: SortOrder
    verificationCodeSentOn?: SortOrder
    user?: EntityOrderByWithRelationInput
    userId?: SortOrder
    primary?: SortOrder
  }

  export type EmailWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type EmailOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    needsVerification?: SortOrder
    verificationCode?: SortOrder
    verificationCodeSentOn?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
    _count?: EmailCountOrderByAggregateInput
    _max?: EmailMaxOrderByAggregateInput
    _min?: EmailMinOrderByAggregateInput
  }

  export type EmailScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EmailScalarWhereWithAggregatesInput>
    OR?: Enumerable<EmailScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EmailScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    needsVerification?: BoolWithAggregatesFilter | boolean
    verificationCode?: StringNullableWithAggregatesFilter | string | null
    verificationCodeSentOn?: DateTimeNullableWithAggregatesFilter | Date | string | null
    userId?: StringWithAggregatesFilter | string
    primary?: BoolWithAggregatesFilter | boolean
  }

  export type LoginAttemptWhereInput = {
    AND?: Enumerable<LoginAttemptWhereInput>
    OR?: Enumerable<LoginAttemptWhereInput>
    NOT?: Enumerable<LoginAttemptWhereInput>
    id?: IntFilter | number
    ip?: StringFilter | string
    userAgent?: StringFilter | string
    headers?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    email?: StringFilter | string
    success?: BoolFilter | boolean
    user?: XOR<EntityRelationFilter, EntityWhereInput>
    userId?: StringFilter | string
  }

  export type LoginAttemptOrderByWithRelationInput = {
    id?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    headers?: SortOrder
    timestamp?: SortOrder
    email?: SortOrder
    success?: SortOrder
    user?: EntityOrderByWithRelationInput
    userId?: SortOrder
  }

  export type LoginAttemptWhereUniqueInput = {
    id?: number
  }

  export type LoginAttemptOrderByWithAggregationInput = {
    id?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    headers?: SortOrder
    timestamp?: SortOrder
    email?: SortOrder
    success?: SortOrder
    userId?: SortOrder
    _count?: LoginAttemptCountOrderByAggregateInput
    _avg?: LoginAttemptAvgOrderByAggregateInput
    _max?: LoginAttemptMaxOrderByAggregateInput
    _min?: LoginAttemptMinOrderByAggregateInput
    _sum?: LoginAttemptSumOrderByAggregateInput
  }

  export type LoginAttemptScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LoginAttemptScalarWhereWithAggregatesInput>
    OR?: Enumerable<LoginAttemptScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LoginAttemptScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    ip?: StringWithAggregatesFilter | string
    userAgent?: StringWithAggregatesFilter | string
    headers?: StringWithAggregatesFilter | string
    timestamp?: DateTimeWithAggregatesFilter | Date | string
    email?: StringWithAggregatesFilter | string
    success?: BoolWithAggregatesFilter | boolean
    userId?: StringWithAggregatesFilter | string
  }

  export type GroupMembershipWhereInput = {
    AND?: Enumerable<GroupMembershipWhereInput>
    OR?: Enumerable<GroupMembershipWhereInput>
    NOT?: Enumerable<GroupMembershipWhereInput>
    id?: StringFilter | string
    group?: XOR<EntityRelationFilter, EntityWhereInput>
    groupId?: StringFilter | string
    member?: XOR<EntityRelationFilter, EntityWhereInput>
    memberId?: StringFilter | string
    joinedAt?: DateTimeFilter | Date | string
  }

  export type GroupMembershipOrderByWithRelationInput = {
    id?: SortOrder
    group?: EntityOrderByWithRelationInput
    groupId?: SortOrder
    member?: EntityOrderByWithRelationInput
    memberId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupMembershipWhereUniqueInput = {
    id?: string
  }

  export type GroupMembershipOrderByWithAggregationInput = {
    id?: SortOrder
    groupId?: SortOrder
    memberId?: SortOrder
    joinedAt?: SortOrder
    _count?: GroupMembershipCountOrderByAggregateInput
    _max?: GroupMembershipMaxOrderByAggregateInput
    _min?: GroupMembershipMinOrderByAggregateInput
  }

  export type GroupMembershipScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GroupMembershipScalarWhereWithAggregatesInput>
    OR?: Enumerable<GroupMembershipScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GroupMembershipScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    groupId?: StringWithAggregatesFilter | string
    memberId?: StringWithAggregatesFilter | string
    joinedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type EntityWhereInput = {
    AND?: Enumerable<EntityWhereInput>
    OR?: Enumerable<EntityWhereInput>
    NOT?: Enumerable<EntityWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    name?: StringFilter | string
    picture?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: BoolFilter | boolean
    deletedAt?: DateTimeNullableFilter | Date | string | null
    memberOfGroups?: GroupMembershipListRelationFilter
    permissionsAssignedToMe?: ExplicitPermissionListRelationFilter
    emails?: EmailListRelationFilter
    loginAttempts?: LoginAttemptListRelationFilter
    pswHash?: StringNullableFilter | string | null
    ownerOfGroups?: EntityListRelationFilter
    explicitPermissionsCreated?: ExplicitPermissionListRelationFilter
    owner?: XOR<EntityRelationFilter, EntityWhereInput> | null
    ownerId?: StringNullableFilter | string | null
    groupMembershipRelations?: GroupMembershipListRelationFilter
  }

  export type EntityOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
    memberOfGroups?: GroupMembershipOrderByRelationAggregateInput
    permissionsAssignedToMe?: ExplicitPermissionOrderByRelationAggregateInput
    emails?: EmailOrderByRelationAggregateInput
    loginAttempts?: LoginAttemptOrderByRelationAggregateInput
    pswHash?: SortOrder
    ownerOfGroups?: EntityOrderByRelationAggregateInput
    explicitPermissionsCreated?: ExplicitPermissionOrderByRelationAggregateInput
    owner?: EntityOrderByWithRelationInput
    ownerId?: SortOrder
    groupMembershipRelations?: GroupMembershipOrderByRelationAggregateInput
  }

  export type EntityWhereUniqueInput = {
    id?: string
    name?: string
  }

  export type EntityOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
    pswHash?: SortOrder
    ownerId?: SortOrder
    _count?: EntityCountOrderByAggregateInput
    _max?: EntityMaxOrderByAggregateInput
    _min?: EntityMinOrderByAggregateInput
  }

  export type EntityScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EntityScalarWhereWithAggregatesInput>
    OR?: Enumerable<EntityScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EntityScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    type?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    picture?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    deleted?: BoolWithAggregatesFilter | boolean
    deletedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    pswHash?: StringNullableWithAggregatesFilter | string | null
    ownerId?: StringNullableWithAggregatesFilter | string | null
  }

  export type ExplicitPermissionWhereInput = {
    AND?: Enumerable<ExplicitPermissionWhereInput>
    OR?: Enumerable<ExplicitPermissionWhereInput>
    NOT?: Enumerable<ExplicitPermissionWhereInput>
    id?: StringFilter | string
    path?: StringFilter | string
    appliesTo?: XOR<EntityRelationFilter, EntityWhereInput>
    appliesToEntityId?: StringFilter | string
    permissionLevel?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    createdBy?: XOR<EntityRelationFilter, EntityWhereInput>
    createdById?: StringFilter | string
  }

  export type ExplicitPermissionOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    appliesTo?: EntityOrderByWithRelationInput
    appliesToEntityId?: SortOrder
    permissionLevel?: SortOrder
    createdOn?: SortOrder
    createdBy?: EntityOrderByWithRelationInput
    createdById?: SortOrder
  }

  export type ExplicitPermissionWhereUniqueInput = {
    id?: string
  }

  export type ExplicitPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    appliesToEntityId?: SortOrder
    permissionLevel?: SortOrder
    createdOn?: SortOrder
    createdById?: SortOrder
    _count?: ExplicitPermissionCountOrderByAggregateInput
    _max?: ExplicitPermissionMaxOrderByAggregateInput
    _min?: ExplicitPermissionMinOrderByAggregateInput
  }

  export type ExplicitPermissionScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ExplicitPermissionScalarWhereWithAggregatesInput>
    OR?: Enumerable<ExplicitPermissionScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ExplicitPermissionScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    path?: StringWithAggregatesFilter | string
    appliesToEntityId?: StringWithAggregatesFilter | string
    permissionLevel?: StringWithAggregatesFilter | string
    createdOn?: DateTimeWithAggregatesFilter | Date | string
    createdById?: StringWithAggregatesFilter | string
  }

  export type EmailCreateInput = {
    id?: string
    email: string
    needsVerification?: boolean
    verificationCode?: string | null
    verificationCodeSentOn?: Date | string | null
    user: EntityCreateNestedOneWithoutEmailsInput
    primary?: boolean
  }

  export type EmailUncheckedCreateInput = {
    id?: string
    email: string
    needsVerification?: boolean
    verificationCode?: string | null
    verificationCodeSentOn?: Date | string | null
    userId: string
    primary?: boolean
  }

  export type EmailUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: EntityUpdateOneRequiredWithoutEmailsInput
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LoginAttemptCreateInput = {
    ip: string
    userAgent: string
    headers: string
    timestamp: Date | string
    email: string
    success: boolean
    user: EntityCreateNestedOneWithoutLoginAttemptsInput
  }

  export type LoginAttemptUncheckedCreateInput = {
    id?: number
    ip: string
    userAgent: string
    headers: string
    timestamp: Date | string
    email: string
    success: boolean
    userId: string
  }

  export type LoginAttemptUpdateInput = {
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    user?: EntityUpdateOneRequiredWithoutLoginAttemptsInput
  }

  export type LoginAttemptUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type LoginAttemptUpdateManyMutationInput = {
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LoginAttemptUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type GroupMembershipCreateInput = {
    id?: string
    group: EntityCreateNestedOneWithoutGroupMembershipRelationsInput
    member: EntityCreateNestedOneWithoutMemberOfGroupsInput
    joinedAt?: Date | string
  }

  export type GroupMembershipUncheckedCreateInput = {
    id?: string
    groupId: string
    memberId: string
    joinedAt?: Date | string
  }

  export type GroupMembershipUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EntityUpdateOneRequiredWithoutGroupMembershipRelationsInput
    member?: EntityUpdateOneRequiredWithoutMemberOfGroupsInput
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EntityCreateInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type EntityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExplicitPermissionCreateInput = {
    id?: string
    path: string
    appliesTo: EntityCreateNestedOneWithoutPermissionsAssignedToMeInput
    permissionLevel: string
    createdOn?: Date | string
    createdBy: EntityCreateNestedOneWithoutExplicitPermissionsCreatedInput
  }

  export type ExplicitPermissionUncheckedCreateInput = {
    id?: string
    path: string
    appliesToEntityId: string
    permissionLevel: string
    createdOn?: Date | string
    createdById: string
  }

  export type ExplicitPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesTo?: EntityUpdateOneRequiredWithoutPermissionsAssignedToMeInput
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EntityUpdateOneRequiredWithoutExplicitPermissionsCreatedInput
  }

  export type ExplicitPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesToEntityId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ExplicitPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplicitPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesToEntityId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type EntityRelationFilter = {
    is?: EntityWhereInput
    isNot?: EntityWhereInput
  }

  export type EmailCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    needsVerification?: SortOrder
    verificationCode?: SortOrder
    verificationCodeSentOn?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
  }

  export type EmailMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    needsVerification?: SortOrder
    verificationCode?: SortOrder
    verificationCodeSentOn?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
  }

  export type EmailMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    needsVerification?: SortOrder
    verificationCode?: SortOrder
    verificationCodeSentOn?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type LoginAttemptCountOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    headers?: SortOrder
    timestamp?: SortOrder
    email?: SortOrder
    success?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type LoginAttemptMaxOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    headers?: SortOrder
    timestamp?: SortOrder
    email?: SortOrder
    success?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptMinOrderByAggregateInput = {
    id?: SortOrder
    ip?: SortOrder
    userAgent?: SortOrder
    headers?: SortOrder
    timestamp?: SortOrder
    email?: SortOrder
    success?: SortOrder
    userId?: SortOrder
  }

  export type LoginAttemptSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type GroupMembershipCountOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    memberId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupMembershipMaxOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    memberId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupMembershipMinOrderByAggregateInput = {
    id?: SortOrder
    groupId?: SortOrder
    memberId?: SortOrder
    joinedAt?: SortOrder
  }

  export type GroupMembershipListRelationFilter = {
    every?: GroupMembershipWhereInput
    some?: GroupMembershipWhereInput
    none?: GroupMembershipWhereInput
  }

  export type ExplicitPermissionListRelationFilter = {
    every?: ExplicitPermissionWhereInput
    some?: ExplicitPermissionWhereInput
    none?: ExplicitPermissionWhereInput
  }

  export type EmailListRelationFilter = {
    every?: EmailWhereInput
    some?: EmailWhereInput
    none?: EmailWhereInput
  }

  export type LoginAttemptListRelationFilter = {
    every?: LoginAttemptWhereInput
    some?: LoginAttemptWhereInput
    none?: LoginAttemptWhereInput
  }

  export type EntityListRelationFilter = {
    every?: EntityWhereInput
    some?: EntityWhereInput
    none?: EntityWhereInput
  }

  export type GroupMembershipOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExplicitPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EmailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoginAttemptOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntityCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
    pswHash?: SortOrder
    ownerId?: SortOrder
  }

  export type EntityMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
    pswHash?: SortOrder
    ownerId?: SortOrder
  }

  export type EntityMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    picture?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deleted?: SortOrder
    deletedAt?: SortOrder
    pswHash?: SortOrder
    ownerId?: SortOrder
  }

  export type ExplicitPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    appliesToEntityId?: SortOrder
    permissionLevel?: SortOrder
    createdOn?: SortOrder
    createdById?: SortOrder
  }

  export type ExplicitPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    appliesToEntityId?: SortOrder
    permissionLevel?: SortOrder
    createdOn?: SortOrder
    createdById?: SortOrder
  }

  export type ExplicitPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    appliesToEntityId?: SortOrder
    permissionLevel?: SortOrder
    createdOn?: SortOrder
    createdById?: SortOrder
  }

  export type EntityCreateNestedOneWithoutEmailsInput = {
    create?: XOR<EntityCreateWithoutEmailsInput, EntityUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutEmailsInput
    connect?: EntityWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type EntityUpdateOneRequiredWithoutEmailsInput = {
    create?: XOR<EntityCreateWithoutEmailsInput, EntityUncheckedCreateWithoutEmailsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutEmailsInput
    upsert?: EntityUpsertWithoutEmailsInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutEmailsInput, EntityUncheckedUpdateWithoutEmailsInput>
  }

  export type EntityCreateNestedOneWithoutLoginAttemptsInput = {
    create?: XOR<EntityCreateWithoutLoginAttemptsInput, EntityUncheckedCreateWithoutLoginAttemptsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutLoginAttemptsInput
    connect?: EntityWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type EntityUpdateOneRequiredWithoutLoginAttemptsInput = {
    create?: XOR<EntityCreateWithoutLoginAttemptsInput, EntityUncheckedCreateWithoutLoginAttemptsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutLoginAttemptsInput
    upsert?: EntityUpsertWithoutLoginAttemptsInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutLoginAttemptsInput, EntityUncheckedUpdateWithoutLoginAttemptsInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EntityCreateNestedOneWithoutGroupMembershipRelationsInput = {
    create?: XOR<EntityCreateWithoutGroupMembershipRelationsInput, EntityUncheckedCreateWithoutGroupMembershipRelationsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutGroupMembershipRelationsInput
    connect?: EntityWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutMemberOfGroupsInput = {
    create?: XOR<EntityCreateWithoutMemberOfGroupsInput, EntityUncheckedCreateWithoutMemberOfGroupsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutMemberOfGroupsInput
    connect?: EntityWhereUniqueInput
  }

  export type EntityUpdateOneRequiredWithoutGroupMembershipRelationsInput = {
    create?: XOR<EntityCreateWithoutGroupMembershipRelationsInput, EntityUncheckedCreateWithoutGroupMembershipRelationsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutGroupMembershipRelationsInput
    upsert?: EntityUpsertWithoutGroupMembershipRelationsInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutGroupMembershipRelationsInput, EntityUncheckedUpdateWithoutGroupMembershipRelationsInput>
  }

  export type EntityUpdateOneRequiredWithoutMemberOfGroupsInput = {
    create?: XOR<EntityCreateWithoutMemberOfGroupsInput, EntityUncheckedCreateWithoutMemberOfGroupsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutMemberOfGroupsInput
    upsert?: EntityUpsertWithoutMemberOfGroupsInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutMemberOfGroupsInput, EntityUncheckedUpdateWithoutMemberOfGroupsInput>
  }

  export type GroupMembershipCreateNestedManyWithoutMemberInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutMemberInput>, Enumerable<GroupMembershipUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutMemberInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
  }

  export type ExplicitPermissionCreateNestedManyWithoutAppliesToInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutAppliesToInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutAppliesToInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutAppliesToInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
  }

  export type EmailCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EmailCreateWithoutUserInput>, Enumerable<EmailUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EmailCreateOrConnectWithoutUserInput>
    connect?: Enumerable<EmailWhereUniqueInput>
  }

  export type LoginAttemptCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LoginAttemptCreateWithoutUserInput>, Enumerable<LoginAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LoginAttemptCreateOrConnectWithoutUserInput>
    connect?: Enumerable<LoginAttemptWhereUniqueInput>
  }

  export type EntityCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<EntityCreateWithoutOwnerInput>, Enumerable<EntityUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<EntityCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<EntityWhereUniqueInput>
  }

  export type ExplicitPermissionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutCreatedByInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutCreatedByInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
  }

  export type EntityCreateNestedOneWithoutOwnerOfGroupsInput = {
    create?: XOR<EntityCreateWithoutOwnerOfGroupsInput, EntityUncheckedCreateWithoutOwnerOfGroupsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutOwnerOfGroupsInput
    connect?: EntityWhereUniqueInput
  }

  export type GroupMembershipCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutGroupInput>, Enumerable<GroupMembershipUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutGroupInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
  }

  export type GroupMembershipUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutMemberInput>, Enumerable<GroupMembershipUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutMemberInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
  }

  export type ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutAppliesToInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutAppliesToInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutAppliesToInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
  }

  export type EmailUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<EmailCreateWithoutUserInput>, Enumerable<EmailUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EmailCreateOrConnectWithoutUserInput>
    connect?: Enumerable<EmailWhereUniqueInput>
  }

  export type LoginAttemptUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LoginAttemptCreateWithoutUserInput>, Enumerable<LoginAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LoginAttemptCreateOrConnectWithoutUserInput>
    connect?: Enumerable<LoginAttemptWhereUniqueInput>
  }

  export type EntityUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<Enumerable<EntityCreateWithoutOwnerInput>, Enumerable<EntityUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<EntityCreateOrConnectWithoutOwnerInput>
    connect?: Enumerable<EntityWhereUniqueInput>
  }

  export type ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutCreatedByInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutCreatedByInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
  }

  export type GroupMembershipUncheckedCreateNestedManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutGroupInput>, Enumerable<GroupMembershipUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutGroupInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
  }

  export type GroupMembershipUpdateManyWithoutMemberInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutMemberInput>, Enumerable<GroupMembershipUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutMemberInput>
    upsert?: Enumerable<GroupMembershipUpsertWithWhereUniqueWithoutMemberInput>
    set?: Enumerable<GroupMembershipWhereUniqueInput>
    disconnect?: Enumerable<GroupMembershipWhereUniqueInput>
    delete?: Enumerable<GroupMembershipWhereUniqueInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
    update?: Enumerable<GroupMembershipUpdateWithWhereUniqueWithoutMemberInput>
    updateMany?: Enumerable<GroupMembershipUpdateManyWithWhereWithoutMemberInput>
    deleteMany?: Enumerable<GroupMembershipScalarWhereInput>
  }

  export type ExplicitPermissionUpdateManyWithoutAppliesToInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutAppliesToInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutAppliesToInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutAppliesToInput>
    upsert?: Enumerable<ExplicitPermissionUpsertWithWhereUniqueWithoutAppliesToInput>
    set?: Enumerable<ExplicitPermissionWhereUniqueInput>
    disconnect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    delete?: Enumerable<ExplicitPermissionWhereUniqueInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    update?: Enumerable<ExplicitPermissionUpdateWithWhereUniqueWithoutAppliesToInput>
    updateMany?: Enumerable<ExplicitPermissionUpdateManyWithWhereWithoutAppliesToInput>
    deleteMany?: Enumerable<ExplicitPermissionScalarWhereInput>
  }

  export type EmailUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<EmailCreateWithoutUserInput>, Enumerable<EmailUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EmailCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EmailUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<EmailWhereUniqueInput>
    disconnect?: Enumerable<EmailWhereUniqueInput>
    delete?: Enumerable<EmailWhereUniqueInput>
    connect?: Enumerable<EmailWhereUniqueInput>
    update?: Enumerable<EmailUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EmailUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EmailScalarWhereInput>
  }

  export type LoginAttemptUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LoginAttemptCreateWithoutUserInput>, Enumerable<LoginAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LoginAttemptCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LoginAttemptUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<LoginAttemptWhereUniqueInput>
    disconnect?: Enumerable<LoginAttemptWhereUniqueInput>
    delete?: Enumerable<LoginAttemptWhereUniqueInput>
    connect?: Enumerable<LoginAttemptWhereUniqueInput>
    update?: Enumerable<LoginAttemptUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LoginAttemptUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LoginAttemptScalarWhereInput>
  }

  export type EntityUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<EntityCreateWithoutOwnerInput>, Enumerable<EntityUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<EntityCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<EntityUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<EntityWhereUniqueInput>
    disconnect?: Enumerable<EntityWhereUniqueInput>
    delete?: Enumerable<EntityWhereUniqueInput>
    connect?: Enumerable<EntityWhereUniqueInput>
    update?: Enumerable<EntityUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<EntityUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<EntityScalarWhereInput>
  }

  export type ExplicitPermissionUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutCreatedByInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<ExplicitPermissionUpsertWithWhereUniqueWithoutCreatedByInput>
    set?: Enumerable<ExplicitPermissionWhereUniqueInput>
    disconnect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    delete?: Enumerable<ExplicitPermissionWhereUniqueInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    update?: Enumerable<ExplicitPermissionUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<ExplicitPermissionUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<ExplicitPermissionScalarWhereInput>
  }

  export type EntityUpdateOneWithoutOwnerOfGroupsInput = {
    create?: XOR<EntityCreateWithoutOwnerOfGroupsInput, EntityUncheckedCreateWithoutOwnerOfGroupsInput>
    connectOrCreate?: EntityCreateOrConnectWithoutOwnerOfGroupsInput
    upsert?: EntityUpsertWithoutOwnerOfGroupsInput
    disconnect?: boolean
    delete?: boolean
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutOwnerOfGroupsInput, EntityUncheckedUpdateWithoutOwnerOfGroupsInput>
  }

  export type GroupMembershipUpdateManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutGroupInput>, Enumerable<GroupMembershipUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupMembershipUpsertWithWhereUniqueWithoutGroupInput>
    set?: Enumerable<GroupMembershipWhereUniqueInput>
    disconnect?: Enumerable<GroupMembershipWhereUniqueInput>
    delete?: Enumerable<GroupMembershipWhereUniqueInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
    update?: Enumerable<GroupMembershipUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupMembershipUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupMembershipScalarWhereInput>
  }

  export type GroupMembershipUncheckedUpdateManyWithoutMemberInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutMemberInput>, Enumerable<GroupMembershipUncheckedCreateWithoutMemberInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutMemberInput>
    upsert?: Enumerable<GroupMembershipUpsertWithWhereUniqueWithoutMemberInput>
    set?: Enumerable<GroupMembershipWhereUniqueInput>
    disconnect?: Enumerable<GroupMembershipWhereUniqueInput>
    delete?: Enumerable<GroupMembershipWhereUniqueInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
    update?: Enumerable<GroupMembershipUpdateWithWhereUniqueWithoutMemberInput>
    updateMany?: Enumerable<GroupMembershipUpdateManyWithWhereWithoutMemberInput>
    deleteMany?: Enumerable<GroupMembershipScalarWhereInput>
  }

  export type ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutAppliesToInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutAppliesToInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutAppliesToInput>
    upsert?: Enumerable<ExplicitPermissionUpsertWithWhereUniqueWithoutAppliesToInput>
    set?: Enumerable<ExplicitPermissionWhereUniqueInput>
    disconnect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    delete?: Enumerable<ExplicitPermissionWhereUniqueInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    update?: Enumerable<ExplicitPermissionUpdateWithWhereUniqueWithoutAppliesToInput>
    updateMany?: Enumerable<ExplicitPermissionUpdateManyWithWhereWithoutAppliesToInput>
    deleteMany?: Enumerable<ExplicitPermissionScalarWhereInput>
  }

  export type EmailUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<EmailCreateWithoutUserInput>, Enumerable<EmailUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<EmailCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<EmailUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<EmailWhereUniqueInput>
    disconnect?: Enumerable<EmailWhereUniqueInput>
    delete?: Enumerable<EmailWhereUniqueInput>
    connect?: Enumerable<EmailWhereUniqueInput>
    update?: Enumerable<EmailUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<EmailUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<EmailScalarWhereInput>
  }

  export type LoginAttemptUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LoginAttemptCreateWithoutUserInput>, Enumerable<LoginAttemptUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LoginAttemptCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LoginAttemptUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<LoginAttemptWhereUniqueInput>
    disconnect?: Enumerable<LoginAttemptWhereUniqueInput>
    delete?: Enumerable<LoginAttemptWhereUniqueInput>
    connect?: Enumerable<LoginAttemptWhereUniqueInput>
    update?: Enumerable<LoginAttemptUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LoginAttemptUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LoginAttemptScalarWhereInput>
  }

  export type EntityUncheckedUpdateManyWithoutOwnerInput = {
    create?: XOR<Enumerable<EntityCreateWithoutOwnerInput>, Enumerable<EntityUncheckedCreateWithoutOwnerInput>>
    connectOrCreate?: Enumerable<EntityCreateOrConnectWithoutOwnerInput>
    upsert?: Enumerable<EntityUpsertWithWhereUniqueWithoutOwnerInput>
    set?: Enumerable<EntityWhereUniqueInput>
    disconnect?: Enumerable<EntityWhereUniqueInput>
    delete?: Enumerable<EntityWhereUniqueInput>
    connect?: Enumerable<EntityWhereUniqueInput>
    update?: Enumerable<EntityUpdateWithWhereUniqueWithoutOwnerInput>
    updateMany?: Enumerable<EntityUpdateManyWithWhereWithoutOwnerInput>
    deleteMany?: Enumerable<EntityScalarWhereInput>
  }

  export type ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput = {
    create?: XOR<Enumerable<ExplicitPermissionCreateWithoutCreatedByInput>, Enumerable<ExplicitPermissionUncheckedCreateWithoutCreatedByInput>>
    connectOrCreate?: Enumerable<ExplicitPermissionCreateOrConnectWithoutCreatedByInput>
    upsert?: Enumerable<ExplicitPermissionUpsertWithWhereUniqueWithoutCreatedByInput>
    set?: Enumerable<ExplicitPermissionWhereUniqueInput>
    disconnect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    delete?: Enumerable<ExplicitPermissionWhereUniqueInput>
    connect?: Enumerable<ExplicitPermissionWhereUniqueInput>
    update?: Enumerable<ExplicitPermissionUpdateWithWhereUniqueWithoutCreatedByInput>
    updateMany?: Enumerable<ExplicitPermissionUpdateManyWithWhereWithoutCreatedByInput>
    deleteMany?: Enumerable<ExplicitPermissionScalarWhereInput>
  }

  export type GroupMembershipUncheckedUpdateManyWithoutGroupInput = {
    create?: XOR<Enumerable<GroupMembershipCreateWithoutGroupInput>, Enumerable<GroupMembershipUncheckedCreateWithoutGroupInput>>
    connectOrCreate?: Enumerable<GroupMembershipCreateOrConnectWithoutGroupInput>
    upsert?: Enumerable<GroupMembershipUpsertWithWhereUniqueWithoutGroupInput>
    set?: Enumerable<GroupMembershipWhereUniqueInput>
    disconnect?: Enumerable<GroupMembershipWhereUniqueInput>
    delete?: Enumerable<GroupMembershipWhereUniqueInput>
    connect?: Enumerable<GroupMembershipWhereUniqueInput>
    update?: Enumerable<GroupMembershipUpdateWithWhereUniqueWithoutGroupInput>
    updateMany?: Enumerable<GroupMembershipUpdateManyWithWhereWithoutGroupInput>
    deleteMany?: Enumerable<GroupMembershipScalarWhereInput>
  }

  export type EntityCreateNestedOneWithoutPermissionsAssignedToMeInput = {
    create?: XOR<EntityCreateWithoutPermissionsAssignedToMeInput, EntityUncheckedCreateWithoutPermissionsAssignedToMeInput>
    connectOrCreate?: EntityCreateOrConnectWithoutPermissionsAssignedToMeInput
    connect?: EntityWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutExplicitPermissionsCreatedInput = {
    create?: XOR<EntityCreateWithoutExplicitPermissionsCreatedInput, EntityUncheckedCreateWithoutExplicitPermissionsCreatedInput>
    connectOrCreate?: EntityCreateOrConnectWithoutExplicitPermissionsCreatedInput
    connect?: EntityWhereUniqueInput
  }

  export type EntityUpdateOneRequiredWithoutPermissionsAssignedToMeInput = {
    create?: XOR<EntityCreateWithoutPermissionsAssignedToMeInput, EntityUncheckedCreateWithoutPermissionsAssignedToMeInput>
    connectOrCreate?: EntityCreateOrConnectWithoutPermissionsAssignedToMeInput
    upsert?: EntityUpsertWithoutPermissionsAssignedToMeInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutPermissionsAssignedToMeInput, EntityUncheckedUpdateWithoutPermissionsAssignedToMeInput>
  }

  export type EntityUpdateOneRequiredWithoutExplicitPermissionsCreatedInput = {
    create?: XOR<EntityCreateWithoutExplicitPermissionsCreatedInput, EntityUncheckedCreateWithoutExplicitPermissionsCreatedInput>
    connectOrCreate?: EntityCreateOrConnectWithoutExplicitPermissionsCreatedInput
    upsert?: EntityUpsertWithoutExplicitPermissionsCreatedInput
    connect?: EntityWhereUniqueInput
    update?: XOR<EntityUpdateWithoutExplicitPermissionsCreatedInput, EntityUncheckedUpdateWithoutExplicitPermissionsCreatedInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type EntityCreateWithoutEmailsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutEmailsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutEmailsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutEmailsInput, EntityUncheckedCreateWithoutEmailsInput>
  }

  export type EntityUpsertWithoutEmailsInput = {
    update: XOR<EntityUpdateWithoutEmailsInput, EntityUncheckedUpdateWithoutEmailsInput>
    create: XOR<EntityCreateWithoutEmailsInput, EntityUncheckedCreateWithoutEmailsInput>
  }

  export type EntityUpdateWithoutEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type EntityCreateWithoutLoginAttemptsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutLoginAttemptsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutLoginAttemptsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutLoginAttemptsInput, EntityUncheckedCreateWithoutLoginAttemptsInput>
  }

  export type EntityUpsertWithoutLoginAttemptsInput = {
    update: XOR<EntityUpdateWithoutLoginAttemptsInput, EntityUncheckedUpdateWithoutLoginAttemptsInput>
    create: XOR<EntityCreateWithoutLoginAttemptsInput, EntityUncheckedCreateWithoutLoginAttemptsInput>
  }

  export type EntityUpdateWithoutLoginAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutLoginAttemptsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type EntityCreateWithoutGroupMembershipRelationsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
  }

  export type EntityUncheckedCreateWithoutGroupMembershipRelationsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
  }

  export type EntityCreateOrConnectWithoutGroupMembershipRelationsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutGroupMembershipRelationsInput, EntityUncheckedCreateWithoutGroupMembershipRelationsInput>
  }

  export type EntityCreateWithoutMemberOfGroupsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutMemberOfGroupsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutMemberOfGroupsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutMemberOfGroupsInput, EntityUncheckedCreateWithoutMemberOfGroupsInput>
  }

  export type EntityUpsertWithoutGroupMembershipRelationsInput = {
    update: XOR<EntityUpdateWithoutGroupMembershipRelationsInput, EntityUncheckedUpdateWithoutGroupMembershipRelationsInput>
    create: XOR<EntityCreateWithoutGroupMembershipRelationsInput, EntityUncheckedCreateWithoutGroupMembershipRelationsInput>
  }

  export type EntityUpdateWithoutGroupMembershipRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
  }

  export type EntityUncheckedUpdateWithoutGroupMembershipRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUpsertWithoutMemberOfGroupsInput = {
    update: XOR<EntityUpdateWithoutMemberOfGroupsInput, EntityUncheckedUpdateWithoutMemberOfGroupsInput>
    create: XOR<EntityCreateWithoutMemberOfGroupsInput, EntityUncheckedCreateWithoutMemberOfGroupsInput>
  }

  export type EntityUpdateWithoutMemberOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutMemberOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type GroupMembershipCreateWithoutMemberInput = {
    id?: string
    group: EntityCreateNestedOneWithoutGroupMembershipRelationsInput
    joinedAt?: Date | string
  }

  export type GroupMembershipUncheckedCreateWithoutMemberInput = {
    id?: string
    groupId: string
    joinedAt?: Date | string
  }

  export type GroupMembershipCreateOrConnectWithoutMemberInput = {
    where: GroupMembershipWhereUniqueInput
    create: XOR<GroupMembershipCreateWithoutMemberInput, GroupMembershipUncheckedCreateWithoutMemberInput>
  }

  export type ExplicitPermissionCreateWithoutAppliesToInput = {
    id?: string
    path: string
    permissionLevel: string
    createdOn?: Date | string
    createdBy: EntityCreateNestedOneWithoutExplicitPermissionsCreatedInput
  }

  export type ExplicitPermissionUncheckedCreateWithoutAppliesToInput = {
    id?: string
    path: string
    permissionLevel: string
    createdOn?: Date | string
    createdById: string
  }

  export type ExplicitPermissionCreateOrConnectWithoutAppliesToInput = {
    where: ExplicitPermissionWhereUniqueInput
    create: XOR<ExplicitPermissionCreateWithoutAppliesToInput, ExplicitPermissionUncheckedCreateWithoutAppliesToInput>
  }

  export type EmailCreateWithoutUserInput = {
    id?: string
    email: string
    needsVerification?: boolean
    verificationCode?: string | null
    verificationCodeSentOn?: Date | string | null
    primary?: boolean
  }

  export type EmailUncheckedCreateWithoutUserInput = {
    id?: string
    email: string
    needsVerification?: boolean
    verificationCode?: string | null
    verificationCodeSentOn?: Date | string | null
    primary?: boolean
  }

  export type EmailCreateOrConnectWithoutUserInput = {
    where: EmailWhereUniqueInput
    create: XOR<EmailCreateWithoutUserInput, EmailUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptCreateWithoutUserInput = {
    ip: string
    userAgent: string
    headers: string
    timestamp: Date | string
    email: string
    success: boolean
  }

  export type LoginAttemptUncheckedCreateWithoutUserInput = {
    id?: number
    ip: string
    userAgent: string
    headers: string
    timestamp: Date | string
    email: string
    success: boolean
  }

  export type LoginAttemptCreateOrConnectWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type EntityCreateWithoutOwnerInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutOwnerInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutOwnerInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutOwnerInput, EntityUncheckedCreateWithoutOwnerInput>
  }

  export type ExplicitPermissionCreateWithoutCreatedByInput = {
    id?: string
    path: string
    appliesTo: EntityCreateNestedOneWithoutPermissionsAssignedToMeInput
    permissionLevel: string
    createdOn?: Date | string
  }

  export type ExplicitPermissionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    path: string
    appliesToEntityId: string
    permissionLevel: string
    createdOn?: Date | string
  }

  export type ExplicitPermissionCreateOrConnectWithoutCreatedByInput = {
    where: ExplicitPermissionWhereUniqueInput
    create: XOR<ExplicitPermissionCreateWithoutCreatedByInput, ExplicitPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type EntityCreateWithoutOwnerOfGroupsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutOwnerOfGroupsInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutOwnerOfGroupsInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutOwnerOfGroupsInput, EntityUncheckedCreateWithoutOwnerOfGroupsInput>
  }

  export type GroupMembershipCreateWithoutGroupInput = {
    id?: string
    member: EntityCreateNestedOneWithoutMemberOfGroupsInput
    joinedAt?: Date | string
  }

  export type GroupMembershipUncheckedCreateWithoutGroupInput = {
    id?: string
    memberId: string
    joinedAt?: Date | string
  }

  export type GroupMembershipCreateOrConnectWithoutGroupInput = {
    where: GroupMembershipWhereUniqueInput
    create: XOR<GroupMembershipCreateWithoutGroupInput, GroupMembershipUncheckedCreateWithoutGroupInput>
  }

  export type GroupMembershipUpsertWithWhereUniqueWithoutMemberInput = {
    where: GroupMembershipWhereUniqueInput
    update: XOR<GroupMembershipUpdateWithoutMemberInput, GroupMembershipUncheckedUpdateWithoutMemberInput>
    create: XOR<GroupMembershipCreateWithoutMemberInput, GroupMembershipUncheckedCreateWithoutMemberInput>
  }

  export type GroupMembershipUpdateWithWhereUniqueWithoutMemberInput = {
    where: GroupMembershipWhereUniqueInput
    data: XOR<GroupMembershipUpdateWithoutMemberInput, GroupMembershipUncheckedUpdateWithoutMemberInput>
  }

  export type GroupMembershipUpdateManyWithWhereWithoutMemberInput = {
    where: GroupMembershipScalarWhereInput
    data: XOR<GroupMembershipUpdateManyMutationInput, GroupMembershipUncheckedUpdateManyWithoutMemberOfGroupsInput>
  }

  export type GroupMembershipScalarWhereInput = {
    AND?: Enumerable<GroupMembershipScalarWhereInput>
    OR?: Enumerable<GroupMembershipScalarWhereInput>
    NOT?: Enumerable<GroupMembershipScalarWhereInput>
    id?: StringFilter | string
    groupId?: StringFilter | string
    memberId?: StringFilter | string
    joinedAt?: DateTimeFilter | Date | string
  }

  export type ExplicitPermissionUpsertWithWhereUniqueWithoutAppliesToInput = {
    where: ExplicitPermissionWhereUniqueInput
    update: XOR<ExplicitPermissionUpdateWithoutAppliesToInput, ExplicitPermissionUncheckedUpdateWithoutAppliesToInput>
    create: XOR<ExplicitPermissionCreateWithoutAppliesToInput, ExplicitPermissionUncheckedCreateWithoutAppliesToInput>
  }

  export type ExplicitPermissionUpdateWithWhereUniqueWithoutAppliesToInput = {
    where: ExplicitPermissionWhereUniqueInput
    data: XOR<ExplicitPermissionUpdateWithoutAppliesToInput, ExplicitPermissionUncheckedUpdateWithoutAppliesToInput>
  }

  export type ExplicitPermissionUpdateManyWithWhereWithoutAppliesToInput = {
    where: ExplicitPermissionScalarWhereInput
    data: XOR<ExplicitPermissionUpdateManyMutationInput, ExplicitPermissionUncheckedUpdateManyWithoutPermissionsAssignedToMeInput>
  }

  export type ExplicitPermissionScalarWhereInput = {
    AND?: Enumerable<ExplicitPermissionScalarWhereInput>
    OR?: Enumerable<ExplicitPermissionScalarWhereInput>
    NOT?: Enumerable<ExplicitPermissionScalarWhereInput>
    id?: StringFilter | string
    path?: StringFilter | string
    appliesToEntityId?: StringFilter | string
    permissionLevel?: StringFilter | string
    createdOn?: DateTimeFilter | Date | string
    createdById?: StringFilter | string
  }

  export type EmailUpsertWithWhereUniqueWithoutUserInput = {
    where: EmailWhereUniqueInput
    update: XOR<EmailUpdateWithoutUserInput, EmailUncheckedUpdateWithoutUserInput>
    create: XOR<EmailCreateWithoutUserInput, EmailUncheckedCreateWithoutUserInput>
  }

  export type EmailUpdateWithWhereUniqueWithoutUserInput = {
    where: EmailWhereUniqueInput
    data: XOR<EmailUpdateWithoutUserInput, EmailUncheckedUpdateWithoutUserInput>
  }

  export type EmailUpdateManyWithWhereWithoutUserInput = {
    where: EmailScalarWhereInput
    data: XOR<EmailUpdateManyMutationInput, EmailUncheckedUpdateManyWithoutEmailsInput>
  }

  export type EmailScalarWhereInput = {
    AND?: Enumerable<EmailScalarWhereInput>
    OR?: Enumerable<EmailScalarWhereInput>
    NOT?: Enumerable<EmailScalarWhereInput>
    id?: StringFilter | string
    email?: StringFilter | string
    needsVerification?: BoolFilter | boolean
    verificationCode?: StringNullableFilter | string | null
    verificationCodeSentOn?: DateTimeNullableFilter | Date | string | null
    userId?: StringFilter | string
    primary?: BoolFilter | boolean
  }

  export type LoginAttemptUpsertWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    update: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
    create: XOR<LoginAttemptCreateWithoutUserInput, LoginAttemptUncheckedCreateWithoutUserInput>
  }

  export type LoginAttemptUpdateWithWhereUniqueWithoutUserInput = {
    where: LoginAttemptWhereUniqueInput
    data: XOR<LoginAttemptUpdateWithoutUserInput, LoginAttemptUncheckedUpdateWithoutUserInput>
  }

  export type LoginAttemptUpdateManyWithWhereWithoutUserInput = {
    where: LoginAttemptScalarWhereInput
    data: XOR<LoginAttemptUpdateManyMutationInput, LoginAttemptUncheckedUpdateManyWithoutLoginAttemptsInput>
  }

  export type LoginAttemptScalarWhereInput = {
    AND?: Enumerable<LoginAttemptScalarWhereInput>
    OR?: Enumerable<LoginAttemptScalarWhereInput>
    NOT?: Enumerable<LoginAttemptScalarWhereInput>
    id?: IntFilter | number
    ip?: StringFilter | string
    userAgent?: StringFilter | string
    headers?: StringFilter | string
    timestamp?: DateTimeFilter | Date | string
    email?: StringFilter | string
    success?: BoolFilter | boolean
    userId?: StringFilter | string
  }

  export type EntityUpsertWithWhereUniqueWithoutOwnerInput = {
    where: EntityWhereUniqueInput
    update: XOR<EntityUpdateWithoutOwnerInput, EntityUncheckedUpdateWithoutOwnerInput>
    create: XOR<EntityCreateWithoutOwnerInput, EntityUncheckedCreateWithoutOwnerInput>
  }

  export type EntityUpdateWithWhereUniqueWithoutOwnerInput = {
    where: EntityWhereUniqueInput
    data: XOR<EntityUpdateWithoutOwnerInput, EntityUncheckedUpdateWithoutOwnerInput>
  }

  export type EntityUpdateManyWithWhereWithoutOwnerInput = {
    where: EntityScalarWhereInput
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyWithoutOwnerOfGroupsInput>
  }

  export type EntityScalarWhereInput = {
    AND?: Enumerable<EntityScalarWhereInput>
    OR?: Enumerable<EntityScalarWhereInput>
    NOT?: Enumerable<EntityScalarWhereInput>
    id?: StringFilter | string
    type?: StringFilter | string
    name?: StringFilter | string
    picture?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    deleted?: BoolFilter | boolean
    deletedAt?: DateTimeNullableFilter | Date | string | null
    pswHash?: StringNullableFilter | string | null
    ownerId?: StringNullableFilter | string | null
  }

  export type ExplicitPermissionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ExplicitPermissionWhereUniqueInput
    update: XOR<ExplicitPermissionUpdateWithoutCreatedByInput, ExplicitPermissionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ExplicitPermissionCreateWithoutCreatedByInput, ExplicitPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type ExplicitPermissionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ExplicitPermissionWhereUniqueInput
    data: XOR<ExplicitPermissionUpdateWithoutCreatedByInput, ExplicitPermissionUncheckedUpdateWithoutCreatedByInput>
  }

  export type ExplicitPermissionUpdateManyWithWhereWithoutCreatedByInput = {
    where: ExplicitPermissionScalarWhereInput
    data: XOR<ExplicitPermissionUpdateManyMutationInput, ExplicitPermissionUncheckedUpdateManyWithoutExplicitPermissionsCreatedInput>
  }

  export type EntityUpsertWithoutOwnerOfGroupsInput = {
    update: XOR<EntityUpdateWithoutOwnerOfGroupsInput, EntityUncheckedUpdateWithoutOwnerOfGroupsInput>
    create: XOR<EntityCreateWithoutOwnerOfGroupsInput, EntityUncheckedCreateWithoutOwnerOfGroupsInput>
  }

  export type EntityUpdateWithoutOwnerOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutOwnerOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type GroupMembershipUpsertWithWhereUniqueWithoutGroupInput = {
    where: GroupMembershipWhereUniqueInput
    update: XOR<GroupMembershipUpdateWithoutGroupInput, GroupMembershipUncheckedUpdateWithoutGroupInput>
    create: XOR<GroupMembershipCreateWithoutGroupInput, GroupMembershipUncheckedCreateWithoutGroupInput>
  }

  export type GroupMembershipUpdateWithWhereUniqueWithoutGroupInput = {
    where: GroupMembershipWhereUniqueInput
    data: XOR<GroupMembershipUpdateWithoutGroupInput, GroupMembershipUncheckedUpdateWithoutGroupInput>
  }

  export type GroupMembershipUpdateManyWithWhereWithoutGroupInput = {
    where: GroupMembershipScalarWhereInput
    data: XOR<GroupMembershipUpdateManyMutationInput, GroupMembershipUncheckedUpdateManyWithoutGroupMembershipRelationsInput>
  }

  export type EntityCreateWithoutPermissionsAssignedToMeInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionCreateNestedManyWithoutCreatedByInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutPermissionsAssignedToMeInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutPermissionsAssignedToMeInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutPermissionsAssignedToMeInput, EntityUncheckedCreateWithoutPermissionsAssignedToMeInput>
  }

  export type EntityCreateWithoutExplicitPermissionsCreatedInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionCreateNestedManyWithoutAppliesToInput
    emails?: EmailCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityCreateNestedManyWithoutOwnerInput
    owner?: EntityCreateNestedOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipCreateNestedManyWithoutGroupInput
  }

  export type EntityUncheckedCreateWithoutExplicitPermissionsCreatedInput = {
    id?: string
    type?: string
    name: string
    picture: string
    createdAt?: Date | string
    updatedAt?: Date | string
    deleted?: boolean
    deletedAt?: Date | string | null
    memberOfGroups?: GroupMembershipUncheckedCreateNestedManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedCreateNestedManyWithoutAppliesToInput
    emails?: EmailUncheckedCreateNestedManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedCreateNestedManyWithoutUserInput
    pswHash?: string | null
    ownerOfGroups?: EntityUncheckedCreateNestedManyWithoutOwnerInput
    ownerId?: string | null
    groupMembershipRelations?: GroupMembershipUncheckedCreateNestedManyWithoutGroupInput
  }

  export type EntityCreateOrConnectWithoutExplicitPermissionsCreatedInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutExplicitPermissionsCreatedInput, EntityUncheckedCreateWithoutExplicitPermissionsCreatedInput>
  }

  export type EntityUpsertWithoutPermissionsAssignedToMeInput = {
    update: XOR<EntityUpdateWithoutPermissionsAssignedToMeInput, EntityUncheckedUpdateWithoutPermissionsAssignedToMeInput>
    create: XOR<EntityCreateWithoutPermissionsAssignedToMeInput, EntityUncheckedCreateWithoutPermissionsAssignedToMeInput>
  }

  export type EntityUpdateWithoutPermissionsAssignedToMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutPermissionsAssignedToMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type EntityUpsertWithoutExplicitPermissionsCreatedInput = {
    update: XOR<EntityUpdateWithoutExplicitPermissionsCreatedInput, EntityUncheckedUpdateWithoutExplicitPermissionsCreatedInput>
    create: XOR<EntityCreateWithoutExplicitPermissionsCreatedInput, EntityUncheckedCreateWithoutExplicitPermissionsCreatedInput>
  }

  export type EntityUpdateWithoutExplicitPermissionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    owner?: EntityUpdateOneWithoutOwnerOfGroupsInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutExplicitPermissionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    ownerId?: NullableStringFieldUpdateOperationsInput | string | null
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type GroupMembershipUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    group?: EntityUpdateOneRequiredWithoutGroupMembershipRelationsInput
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateWithoutMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateManyWithoutMemberOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    groupId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplicitPermissionUpdateWithoutAppliesToInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: EntityUpdateOneRequiredWithoutExplicitPermissionsCreatedInput
  }

  export type ExplicitPermissionUncheckedUpdateWithoutAppliesToInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type ExplicitPermissionUncheckedUpdateManyWithoutPermissionsAssignedToMeInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: StringFieldUpdateOperationsInput | string
  }

  export type EmailUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EmailUncheckedUpdateManyWithoutEmailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    needsVerification?: BoolFieldUpdateOperationsInput | boolean
    verificationCode?: NullableStringFieldUpdateOperationsInput | string | null
    verificationCodeSentOn?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LoginAttemptUpdateWithoutUserInput = {
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LoginAttemptUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type LoginAttemptUncheckedUpdateManyWithoutLoginAttemptsInput = {
    id?: IntFieldUpdateOperationsInput | number
    ip?: StringFieldUpdateOperationsInput | string
    userAgent?: StringFieldUpdateOperationsInput | string
    headers?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    email?: StringFieldUpdateOperationsInput | string
    success?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EntityUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUpdateManyWithoutAppliesToInput
    emails?: EmailUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUpdateManyWithoutCreatedByInput
    groupMembershipRelations?: GroupMembershipUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    memberOfGroups?: GroupMembershipUncheckedUpdateManyWithoutMemberInput
    permissionsAssignedToMe?: ExplicitPermissionUncheckedUpdateManyWithoutAppliesToInput
    emails?: EmailUncheckedUpdateManyWithoutUserInput
    loginAttempts?: LoginAttemptUncheckedUpdateManyWithoutUserInput
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
    ownerOfGroups?: EntityUncheckedUpdateManyWithoutOwnerInput
    explicitPermissionsCreated?: ExplicitPermissionUncheckedUpdateManyWithoutCreatedByInput
    groupMembershipRelations?: GroupMembershipUncheckedUpdateManyWithoutGroupInput
  }

  export type EntityUncheckedUpdateManyWithoutOwnerOfGroupsInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    picture?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deleted?: BoolFieldUpdateOperationsInput | boolean
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    pswHash?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ExplicitPermissionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesTo?: EntityUpdateOneRequiredWithoutPermissionsAssignedToMeInput
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplicitPermissionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesToEntityId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExplicitPermissionUncheckedUpdateManyWithoutExplicitPermissionsCreatedInput = {
    id?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    appliesToEntityId?: StringFieldUpdateOperationsInput | string
    permissionLevel?: StringFieldUpdateOperationsInput | string
    createdOn?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    member?: EntityUpdateOneRequiredWithoutMemberOfGroupsInput
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateWithoutGroupInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type GroupMembershipUncheckedUpdateManyWithoutGroupMembershipRelationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}